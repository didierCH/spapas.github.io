<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>/var/</title><link>http://spapas.github.io/</link><description>Various programming stuff</description><atom:link href="http://spapas.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 29 Apr 2015 10:20:00 +0300</lastBuildDate><item><title>Show 404 page on django when DEBUG=True</title><link>http://spapas.github.io/2015/04/29/django-show-404-page/</link><description>&lt;p&gt;The default 404 error page on django can be &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/topics/http/views/#the-http404-exception"&gt;easily overriden&lt;/a&gt; by adding
a template named &lt;tt class="docutils literal"&gt;404.html&lt;/tt&gt; to the top level directory of your templates.
However, on your development environment you&amp;#8217;ll never be able to see this
template because when &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DEBUG&lt;/span&gt;=True&lt;/tt&gt; django will render the debug not found
page to help you debug your url&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;If you want to display that page in your development environment you can always
change the &lt;span class="caps"&gt;DEBUG&lt;/span&gt; setting to False, however there&amp;#8217;s a better way: Add a url
pattern for django&amp;#8217;s default 404 view - just  add the following to your &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.views.defaults&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# Other url patterns ...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^404/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_not_found&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll then be able to see your 404 page by visiting the defined &lt;span class="caps"&gt;URL&lt;/span&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Wed, 29 Apr 2015 10:20:00 +0300</pubDate><guid>tag:spapas.github.io,2015-04-29:2015/04/29/django-show-404-page/</guid><category>django</category><category>debug</category><category>404</category><category>error</category><category>python</category></item><item><title>Calling the REST API of Pusher fromÂ python</title><link>http://spapas.github.io/2015/02/06/python-pusher-rest/</link><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pusher.com/"&gt;Pusher&lt;/a&gt; is one of the best real time frameworks right now. Using it you can add real time
events in your projects without the need to configure and use &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers that support
real-time events in your environment. I used it recently in a project and it worked really
good, having a very simple &lt;span class="caps"&gt;API&lt;/span&gt; and a nice interface for debugging your&amp;nbsp;requests.&lt;/p&gt;
&lt;p&gt;The only problem I&amp;#8217;ve found was that the &lt;a class="reference external" href="https://github.com/pusher/pusher_client_python"&gt;Pusher python &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; misses some features that
the APIs for other languages have, specifically finding out the users on a presence&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;Pusher supports real-time events through the use of &amp;quot;channels&amp;quot;. Each pusher client will
subscribe to a channel and receive messages that are sent to that channel. A special kind
of channel are presence channels which keep a list of their subscribers. You can query the
&lt;a class="reference external" href="https://pusher.com/docs/rest_api"&gt;Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (or f.e the Pusher Javascript &lt;span class="caps"&gt;API&lt;/span&gt;) to find out the names of the users
in a presence channel - however this is &lt;em&gt;not&lt;/em&gt; currently possible with the python &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Unfortuanately, calling the Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is &lt;em&gt;not&lt;/em&gt; so easy, since it needs a complicated
singining of each request, so I&amp;#8217;ve written this post to help developers that need to call
this &lt;span class="caps"&gt;API&lt;/span&gt; from python (to get the users of a presence channel or for any other method the
&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;supports).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-the-request"&gt;
&lt;h2&gt;Signing the&amp;nbsp;request&lt;/h2&gt;
&lt;p&gt;Quoting from the &lt;a class="reference external" href="https://pusher.com/docs/rest_api"&gt;Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;, to sign a request we need a signature,&amp;nbsp;which:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The signature is a &lt;span class="caps"&gt;HMAC&lt;/span&gt; &lt;span class="caps"&gt;SHA256&lt;/span&gt; hex digest. This is generated by signing a string made up of the following components concatenated with newline characters&amp;nbsp;\n:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The uppercase request method (e.g. &lt;span class="caps"&gt;POST&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;The request path (e.g.&amp;nbsp;/some/resource)&lt;/li&gt;
&lt;li&gt;The query parameters sorted by key, with keys converted to lowercase, then joined as in the query string. Note that the string must not be url escaped (e.g. given the keys auth_key: foo, Name: Something else, you get auth_key=foo&amp;amp;name=Something&amp;nbsp;else)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, we need to create a string and then sign it using our Pusher api_key and secret. To help with this, we create a &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;
class which will be initialzed with out pusher key/secret and correctly sign a&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It uses the &lt;tt class="docutils literal"&gt;hmac&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;hashlib&lt;/tt&gt; python&amp;nbsp;modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-the-complete-query-string"&gt;
&lt;h2&gt;Generating the complete query&amp;nbsp;string&lt;/h2&gt;
&lt;p&gt;We can now create a function that will sign a request using an instance of the above&amp;nbsp;token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sign_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;auth_signature=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sign_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt; receives an instance of a &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;, the path that we want to request
without the server part (for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/apps/33/users/my-channel&lt;/span&gt;&lt;/tt&gt;)  and a dictionary of
request parameters. It then adds three extra fields to the request parameters (&lt;tt class="docutils literal"&gt;auth_key, auth_timestamp, auth_version&lt;/tt&gt;)
and creates a list of these parameters in the &lt;tt class="docutils literal"&gt;key=value&lt;/tt&gt; form, where the keys are alphabetically sorted.
After that it joins the above &lt;tt class="docutils literal"&gt;key=value&lt;/tt&gt; parameters using &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; to create the &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt; and then it creates the string to be signed (&lt;tt class="docutils literal"&gt;sign_data&lt;/tt&gt;)
by concatenating the &lt;span class="caps"&gt;HTTP&lt;/span&gt; methdo (&lt;span class="caps"&gt;GET&lt;/span&gt;) with the path and the &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt;. Finally, it appends the signing result as an extra
query parameter named (&lt;tt class="docutils literal"&gt;auth_signature&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requesting-the-users-of-the-presence-channel"&gt;
&lt;h2&gt;Requesting the users of the presence&amp;nbsp;channel&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt; can now be used to get the users of a presence channel like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;partial_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;/apps/{0}/channels/{1}/users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.pusherapp.com/{0}?{1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;get_users&lt;/tt&gt; function will generate the path of the pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; (using
our pusher app_id and channel name) and initialize a signing &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt; using
the pusher key and secret. It will then pass the previous to &lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt;
to generate the complete &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt; and generate the &lt;tt class="docutils literal"&gt;full_path&lt;/tt&gt; to which
a simple &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; request is issued. The result will be a &lt;span class="caps"&gt;JSON&lt;/span&gt; list of the users in the
presence&amp;nbsp;channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complete-example"&gt;
&lt;h2&gt;Complete&amp;nbsp;example&lt;/h2&gt;
&lt;p&gt;A complete example of getting the presence users of a channel is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;app_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_app_id&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_key&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_secret&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_presence_channel&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sign_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;auth_signature=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sign_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;partial_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;/apps/{0}/channels/{1}/users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.pusherapp.com/{0}?{1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With the above we are able to not only easily get the users of a Pusher presence
channel in python but to also call any method we want from the Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; by implementing a function
similar to  &lt;tt class="docutils literal"&gt;get_users&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Fri, 06 Feb 2015 12:20:00 +0200</pubDate><guid>tag:spapas.github.io,2015-02-06:2015/02/06/python-pusher-rest/</guid><category>pusher</category><category>python</category><category>rest</category><category></category></item><item><title>Asynchronous tasks in django withÂ django-rq</title><link>http://spapas.github.io/2015/01/27/async-tasks-with-django-rq/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#job-queues-in-python" id="id2"&gt;Job queues in&amp;nbsp;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#django-test-rq" id="id3"&gt;django-test-rq&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#models-py" id="id4"&gt;models.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#forms-py" id="id5"&gt;forms.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#views-py" id="id6"&gt;views.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tasks-py" id="id7"&gt;tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#settings-py" id="id8"&gt;settings.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#running-the-project" id="id9"&gt;Running the&amp;nbsp;project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rqworker-and-rqscheduler" id="id10"&gt;rqworker and rqscheduler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#for-development" id="id11"&gt;For&amp;nbsp;development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#for-production" id="id12"&gt;For&amp;nbsp;production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id13"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Job queuing (asynchronous tasks) is a common requirement for non-trivial django projects. Whenever an operation
can take more than half a second it should be put to a job queue in order to be run asynchronously by a
seperate worker. This is really important since the response to a user request needs to be immediate
or else the users will experience laggy behavior and start complaining!
Even for fairly quick tasks (like sending email through an &lt;span class="caps"&gt;SMTP&lt;/span&gt; server) you need to use an asynchronous task
if you care about your users since
the time required for such a task is not really&amp;nbsp;limited.&lt;/p&gt;
&lt;p&gt;Using job queues is involved not only for the developers of the application (who need to create the
asynchronous tasks and give feedback to the users when the&amp;#8217;ve finished since they can&amp;#8217;t use the normal
&lt;span class="caps"&gt;HTTP&lt;/span&gt; response) and but also for the administrators, since, in order to support job queues at least two
more componets will be&amp;nbsp;needed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One job queue that will store the jobs to be executed next in a first in first queue. This could be the normal database of the project however it&amp;#8217;s not recommended for performance reasons and most of thetimes it is a specific component called &amp;quot;Message&amp;nbsp;Broker&amp;quot;&lt;/li&gt;
&lt;li&gt;One (or more) workers that will monitor the job queue and when there is work to do they will dequeue and execute&amp;nbsp;it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These can all run in the same server but if it gets saturated they can easily be seperated (even more work for&amp;nbsp;administrators).&lt;/p&gt;
&lt;p&gt;Beyond job queuing, another relative requirement for many projects is to schedule a task to be run in the future
(similar to the &lt;tt class="docutils literal"&gt;at&lt;/tt&gt; unix command) or at specific time intervals (similar to the &lt;tt class="docutils literal"&gt;cron&lt;/tt&gt; unix command). For
instance, if a user is registered today we may need to check after one or two days if he&amp;#8217;s logged in and used our application -
if he hasn&amp;#8217;t then probably he&amp;#8217;s having problems and we can call him to help him. Also, we could check every night
to see if any users that have registered to our application don&amp;#8217;t have activated their account through email activation
and delete these accounts. Scheduled tasks should be also run by the workers mentioned&amp;nbsp;above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-queues-in-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Job queues in&amp;nbsp;python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most known application for using job queues in python is &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;celery&lt;/a&gt; which is a really great project that supports
many brokers,  integrates nicely
with python/django (but can be used even with other languages) and has
many more features (most of them are only useful on really big, enterprise projects). I&amp;#8217;ve already used
it in a previous application, however, because celery is really complex I found it rather difficult to
configure it successfully and I never was perfectly sure that my asynchronous task would actually work or
that I&amp;#8217;d used the correct configuration for my&amp;nbsp;needs!&lt;/p&gt;
&lt;p&gt;Celery also has &lt;a class="reference external" href="http://celery.readthedocs.org/en/latest/faq.html#does-celery-have-many-dependencies"&gt;many dependencies&lt;/a&gt; in order to be able to talk with the different broker backends it supports,
improve multithreading support etc. They may be required in enterprise apps but not for most Django web based&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;So, for small-to-average projects I recommend using a different asynchronous task solution instead of celery, particularly
(as you&amp;#8217;ve already guessed from the title of this post) &lt;a class="reference external" href="http://python-rq.org/"&gt;&lt;span class="caps"&gt;RQ&lt;/span&gt;&lt;/a&gt;. &lt;span class="caps"&gt;RQ&lt;/span&gt; is simpler than celery, it integrates great with django
using the excellent &lt;a class="reference external" href="https://github.com/ui/django-rq"&gt;django-rq&lt;/a&gt; package and doesn&amp;#8217;t actually have any more dependencies beyond redis support which is
used as a broker (however most modern django projects already use redis for their caching needs as an  alternative
to&amp;nbsp;memcached).&lt;/p&gt;
&lt;p&gt;It even supports supports job scheduling through the &lt;a class="reference external" href="https://github.com/ui/rq-scheduler"&gt;rq-scheduler&lt;/a&gt; package (celery also supports
job scheduling through celery beat): Run a different process (scheduler) that polls the job
scheduling queue for any jobs that need to be run because of scheduling and if yes put them to
the normal job&amp;nbsp;queue.&lt;/p&gt;
&lt;p&gt;Although &lt;span class="caps"&gt;RQ&lt;/span&gt; and frieds are really easy to use (and have nice documentation) I wasn&amp;#8217;t able to find
a &lt;em&gt;complete&lt;/em&gt; example of using it with django, so I&amp;#8217;ve implemented one
(found at &lt;a class="reference external" href="https://github.com/spapas/django-test-rq"&gt;https://github.com/spapas/django-test-rq&lt;/a&gt;) mainly for my own testing
purposes. To help others that want to also use &lt;span class="caps"&gt;RQ&lt;/span&gt; in their project but don&amp;#8217;t know from where
to start, I&amp;#8217;ll present it in the following paragraphs, along with some comments on
how to actually use &lt;span class="caps"&gt;RQ&lt;/span&gt; in your production&amp;nbsp;environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-test-rq"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;django-test-rq&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a simple django project that can be used to asynchronously
run and schedule jobs and examine their behavior. The job to be scheduled just downloads a provided
&lt;span class="caps"&gt;URL&lt;/span&gt; and counts its length. There is only one django application (tasks) that contains two views, one
to display existing tasks and create new ones and one to display some info for the&amp;nbsp;jobs.&lt;/p&gt;
&lt;div class="section" id="models-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;models.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Two models (&lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ScheduledTask&lt;/tt&gt;) for saving individual tasks and
scheduled tasks and one model (&lt;tt class="docutils literal"&gt;ScheduledTaskInstance&lt;/tt&gt;) to save scheduled
instances of each scheduled&amp;nbsp;task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# A model to save information about an asynchronous task&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScheduledTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# A model to save information about a scheduled task&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# A scheduled task has a common job id for all its occurences&lt;/span&gt;
    &lt;span class="n"&gt;job_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScheduledTaskInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# A model to save information about instances of a scheduled task&lt;/span&gt;
    &lt;span class="n"&gt;scheduled_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ScheduledTask&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="forms-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;forms.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A very simple form to create a new&amp;nbsp;task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; A simple form to read a url from the user in order to find out its length&lt;/span&gt;
&lt;span class="sd"&gt;    and either run it asynchronously or schedule it schedule_times times,&lt;/span&gt;
&lt;span class="sd"&gt;    every schedule_interval seconds.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Enter a url (starting with http/https) to start a job that will download it and count its words&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;How many times to run this job. Leave empty or 0 to run it only once.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;schedule_interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;How much time (in seconds) between runs of the job. Leave empty to run it only once.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TaskForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;schedule_interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;schedule_interval&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Please fill both schedule_times and schedule_interval to schedule a job or leave them both empty&amp;#39;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="views-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;views.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is actually very simple if you&amp;#8217;re familiar with Class Based Views. Two CBVs
are defined, one for the Task form + Task display and another for the Job&amp;nbsp;display.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.edit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tasks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_url_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scheduled_get_url_words&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ScheduledTask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq.job&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django_rq&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FormView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A class that displays a form to read a url to read its contents and if the job&lt;/span&gt;
&lt;span class="sd"&gt;    is to be scheduled or not and information about all the tasks and scheduled tasks.&lt;/span&gt;

&lt;span class="sd"&gt;    When the form is submitted, the task will be either scheduled based on the&lt;/span&gt;
&lt;span class="sd"&gt;    parameters of the form or will be just executed asynchronously immediately.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TaskForm&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tasks_home.html&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;success_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;schedule_interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;schedule_interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;schedule_times&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Schedule the job with the form parameters&lt;/span&gt;
            &lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_rq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_scheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;scheduled_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;scheduled_get_url_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;schedule_times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Just execute the job asynchronously&lt;/span&gt;
            &lt;span class="n"&gt;get_url_words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TasksHomeFormView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-created_on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scheduled_tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScheduledTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-created_on&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JobTemplateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A simple template view that gets a job id as a kwarg parameter&lt;/span&gt;
&lt;span class="sd"&gt;    and tries to fetch that job from RQ. It will then print all attributes&lt;/span&gt;
&lt;span class="sd"&gt;    of that object using __dict__.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;job.html&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JobTemplateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;redis_conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;django_rq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;redis_conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tasks-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;tasks.py&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here two jobs are defined: One to be used for simple asynchronous tasks and the
other to be used for scheduled asynchronous tasks (since for asynchronous tasks
we wanted to group their runs per job&amp;nbsp;id).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;#64;job&lt;/tt&gt; decorator will add the &lt;tt class="docutils literal"&gt;delay()&lt;/tt&gt; method (used in &lt;tt class="docutils literal"&gt;views.py&lt;/tt&gt;) to
the function. It&amp;#8217;s not really required for &lt;tt class="docutils literal"&gt;scheduled_get_url_words&lt;/tt&gt; since
it&amp;#8217;s called through the &lt;tt class="docutils literal"&gt;scheduled.schedule&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When a task is finished, it can return a value (like we do in &lt;tt class="docutils literal"&gt;return task.result&lt;/tt&gt;)
which will be saved for a limited amount of time (500 seconds by default - could be
even saved for ever) to redis.
This may be useful in some cases, however, I think that for normal web applications it&amp;#8217;s
not that useful, and since here we use normal django models
for each task, we can save it to that model&amp;#8217;s instance&amp;nbsp;instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ScheduledTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ScheduledTaskInstance&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_rq&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;


&lt;span class="nd"&gt;@job&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_url_words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# This creates a Task instance to save the job instance and job result&lt;/span&gt;
    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;


&lt;span class="nd"&gt;@job&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scheduled_get_url_words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This creates a ScheduledTask instance for each group of&lt;/span&gt;
&lt;span class="sd"&gt;    scheduled task - each time this scheduled task is run&lt;/span&gt;
&lt;span class="sd"&gt;    a new instance of ScheduledTaskInstance will be created&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_current_job&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScheduledTask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;job_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_id&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ScheduledTaskInstance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;scheduled_task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response_len&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;settings.py&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;123&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;django_extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django_rq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;tasks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_test_rq.urls&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_test_rq.wsgi.application&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Use redis for caches&lt;/span&gt;
&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;BACKEND&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;django_redis.cache.RedisCache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;LOCATION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;redis://127.0.0.1:6379/0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;OPTIONS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;CLIENT_CLASS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;django_redis.client.DefaultClient&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Use the same redis as with caches for RQ&lt;/span&gt;
&lt;span class="n"&gt;RQ_QUEUES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USE_REDIS_CACHE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;django.contrib.sessions.backends.cache&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SESSION_CACHE_ALIAS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;RQ_SHOW_ADMIN_LINK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Add a logger for rq_scheduler in order to display when jobs are queueud&lt;/span&gt;
&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;formatters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;logging.StreamHandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;simple&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;rq_scheduler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;console&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;DEBUG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, rq_scheduler won&amp;#8217;t log anything so we won&amp;#8217;t be able to see
any output when new instances of each scheduled task are queued for execution.
That&amp;#8217;s why we&amp;#8217;ve overriden the &lt;span class="caps"&gt;LOGGING&lt;/span&gt; setting in order to actually log
rq_scheduler output to the&amp;nbsp;console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-the-project"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Running the&amp;nbsp;project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I recommend using &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; to start a stock ubuntu/trusty32 box. After that, install redis, virtualenv and virtualenvwrapper
and create/activate a virtualenv named &lt;tt class="docutils literal"&gt;rq&lt;/tt&gt;. You can go to the home directory of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-test-rq&lt;/span&gt;&lt;/tt&gt;
and install requirements through &lt;tt class="docutils literal"&gt;pip install requirements.txt&lt;/tt&gt; and create the database tables with
&lt;tt class="docutils literal"&gt;python manage.py migrate&lt;/tt&gt;. Finally you may run the project with &lt;tt class="docutils literal"&gt;python manage.py runserver_plus&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rqworker-and-rqscheduler"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;rqworker and&amp;nbsp;rqscheduler&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before scheduling any tasks we need to run two more&amp;nbsp;processes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;rqworker: This is a worker that dequeues jobs from the queue and executes them. We could run more than one onstance of this job if we need&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;rqscheduler: This is a process that runs every one minute and checks if there are scheduled jobs that have to be executed. If yes, it will add them to the queue in order to be executed by a&amp;nbsp;worker.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="for-development"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;For&amp;nbsp;development&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to run rqworker and rqscheduler for your development environment you can just do it with
running &lt;tt class="docutils literal"&gt;python manage.py rqworker&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;python mange.py rqscheduler&lt;/tt&gt; through screen/tmux. If everything
is allright you should see tasks being added to the queue and scheduled (you may need to refresh the
homepage before seeing everything since a task may be executed after the response is&amp;nbsp;created).&lt;/p&gt;
&lt;p&gt;Also, keep in mind that rqscheduler runs once every minute by default so you may need to wait up to
minute to see a &lt;tt class="docutils literal"&gt;ScheduledTask&lt;/tt&gt; instance. Also, this means that you can&amp;#8217;t run more than one scheduled
task instance per&amp;nbsp;minute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-production"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;For&amp;nbsp;production&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Trying to create daemons through screen is not
sufficient for a production envornment since we&amp;#8217;d like to actually have logging, monitoring and of course
automatically start rqworker and rqscheduler when the server&amp;nbsp;boots.&lt;/p&gt;
&lt;p&gt;For this, I recommend using the &lt;a class="reference external" href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; tool which
can be used to monitor and control a number of processes. There are other similar tools, however I&amp;#8217;ve
found supervisord the easier to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;In order to monitor/control a process through supervisord you need to add a &lt;tt class="docutils literal"&gt;[program:progrname]&lt;/tt&gt; section in
supervisord&amp;#8217;s configuration and pass a number of parameters. The &lt;tt class="docutils literal"&gt;progname&lt;/tt&gt; is the name of the monitoring
process. Here&amp;#8217;s how rqworker can be configured using&amp;nbsp;supervisord:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[program:rqworker]
command=python manage.py rqworker
directory=/vagrant/progr/py/rq/django-test-rq
environment=PATH=&amp;quot;/home/vagrant/.virtualenvs/rq/bin&amp;quot;
user=vagrant
&lt;/pre&gt;
&lt;p&gt;The options used will chdir to &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt; and execute &lt;tt class="docutils literal"&gt;command&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;user&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;environment&lt;/tt&gt;
option can be used to set envirotnment variables - here we set &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/tt&gt; in order to use a specific
virtual environment. This will allow you to monitor rqworker through supervisord and log its
output to a file in &lt;tt class="docutils literal"&gt;/var/log/supervisor&lt;/tt&gt; (by default). A similar entry needs to be added for
rqscheduler of course. If everything has been configured correctly, when you reload the supervisord
settings you can run &lt;tt class="docutils literal"&gt;sudo /usr/bin/supervisorctl&lt;/tt&gt; and should see something&amp;nbsp;like&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
rqscheduler                      RUNNING    pid 1561, uptime 0:00:03
rqworker                         RUNNING    pid 1562, uptime 0:00:03
&lt;/pre&gt;
&lt;p&gt;Also, tho log files should contain some debug&amp;nbsp;info.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although using job queues makes it more difficult for the developer and adds at least one
(and probably more) points of failure to a project (the workers, the broker etc) their
usage, even for very simple projects is&amp;nbsp;unavoidable.&lt;/p&gt;
&lt;p&gt;Unless a complex, enterprise solution like celery is really required for a project
I recommend using the much simpler and easier to configure &lt;span class="caps"&gt;RQ&lt;/span&gt; for all your
asynchronous and scheduled task needs. Using &lt;span class="caps"&gt;RQ&lt;/span&gt; (and the relative projects django-rq
and rq-scheduler) we can easily add production ready queueued and scheduled jobs to
any django&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;In this article we presented a small introduction to &lt;span class="caps"&gt;RQ&lt;/span&gt; and its friends and saw how
to configure django to use it in a production ready environment using a small
django project (&lt;a class="reference external" href="https://github.com/spapas/django-test-rq"&gt;https://github.com/spapas/django-test-rq&lt;/a&gt;) which was implemented as a companion
to help readers quickly test the concepts presented&amp;nbsp;here.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Tue, 27 Jan 2015 14:20:00 +0200</pubDate><guid>tag:spapas.github.io,2015-01-27:2015/01/27/async-tasks-with-django-rq/</guid><category>django</category><category>python</category><category>tasks</category><category>jobs</category><category>rq</category><category>django-rq</category><category>asynchronous</category><category>scheduling</category><category>redis</category></item><item><title>Django modelÂ auditing</title><link>http://spapas.github.io/2015/01/21/django-model-auditing/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id5"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#adding-simple-auditing-functionality-ourselves" id="id6"&gt;Adding simple auditing functionality&amp;nbsp;ourselves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#example" id="id7"&gt;Example&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#models-py" id="id8"&gt;models.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#forms-py" id="id9"&gt;forms.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#views-py" id="id10"&gt;views.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#urls-py" id="id11"&gt;urls.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#templates" id="id12"&gt;templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-django-simple-history" id="id13"&gt;Using django-simple-history&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installation" id="id14"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id1" id="id15"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#usage" id="id16"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-django-reversion" id="id17"&gt;Using django-reversion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id2" id="id18"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id3" id="id19"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#id4" id="id20"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id21"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An auditing trail is a common requirement in most non-trivial applications. Organizations
need to know &lt;em&gt;who&lt;/em&gt; did the change, &lt;em&gt;when&lt;/em&gt; it was done and &lt;em&gt;what&lt;/em&gt; was actually changed.
In this post we will see three
different solution in order to add this functionality in Django: doing it ourselves,
using django-simple-history and using&amp;nbsp;django-reversion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-simple-auditing-functionality-ourselves"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Adding simple auditing functionality&amp;nbsp;ourselves&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A simple way to actually do auditing is to keep four extra fields in our models:
&lt;tt class="docutils literal"&gt;created_by&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;created_on&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;modified_by&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;modified_on&lt;/tt&gt;. The first two
will be filled when the model instance is created while the latter two will be
changed whenever the model instance is saved. So we only have &lt;em&gt;who&lt;/em&gt; and &lt;em&gt;whe&lt;/em&gt;.
Sometimes, these are enough so let&amp;#8217;s see how easy it is to implement it in&amp;nbsp;django.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll need an abstract model that could be used as a base class for models that need&amp;nbsp;auditing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Auditable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;created_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;modified_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;modified_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;modified_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Models inheriting from &lt;tt class="docutils literal"&gt;Auditable&lt;/tt&gt; will contain their datetime of creation and modification
which will be automatically filled using the very usefull &lt;tt class="docutils literal"&gt;auto_now_add_&lt;/tt&gt; (which will
set the current datetime when the model instance is created) and &lt;tt class="docutils literal"&gt;auto_now_&lt;/tt&gt; (which will
set the current datetime when the model instance is&amp;nbsp;modified).&lt;/p&gt;
&lt;p&gt;Such models will also have two foreign keys to &lt;tt class="docutils literal"&gt;User&lt;/tt&gt;, one for the user
that created the and one of the user that modified them. The problem with these two fields
is that they cannot be filled automatically (like the datetimes) because the user that
actually did create/change the objects must be&amp;nbsp;provided!&lt;/p&gt;
&lt;p&gt;Since I am really fond of CBVs I will present a simple mixin that can be used with CreateView
and UpdateView and does exactly&amp;nbsp;that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modified_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above mixin overrides the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt;:
First it checks if the object is created (if it is created it won&amp;#8217;t be saved in the
database yet thus it won&amp;#8217;t have an id) in order to set the &lt;tt class="docutils literal"&gt;created_by&lt;/tt&gt; attribute to
the current user. After that it will set the &lt;tt class="docutils literal"&gt;modified_by&lt;/tt&gt; attribute of the object to
the current user. Finally, it will call the next &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method to do whatever
is required (save the model instance and redirect to &lt;tt class="docutils literal"&gt;success_url&lt;/tt&gt; by&amp;nbsp;default).&lt;/p&gt;
&lt;p&gt;The views using &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; should allow only logged in users (or else an
exception will be thrown). Also, don&amp;#8217;t forget to exclude the &lt;tt class="docutils literal"&gt;created_by&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;modified_by&lt;/tt&gt;
fields from your model form (&lt;tt class="docutils literal"&gt;created_on&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;modified_on&lt;/tt&gt; will automatically be&amp;nbsp;excluded).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s see a simple example of creating a small django application using the previously defined abstract model and&amp;nbsp;mixin:&lt;/p&gt;
&lt;div class="section" id="models-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;models.py&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;auditable.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Auditable&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Auditable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;book_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above we suppose that the &lt;tt class="docutils literal"&gt;Auditable&lt;/tt&gt; abstract model is imported from the
&lt;tt class="docutils literal"&gt;auditable.models&lt;/tt&gt; module and that a view named &lt;tt class="docutils literal"&gt;book_list&lt;/tt&gt; that shows all books&amp;nbsp;exists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="forms-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;forms.py&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Show only &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;author&lt;/tt&gt; fields (and not the auditable fields) in the &lt;tt class="docutils literal"&gt;Book ModelForm&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="views-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;views.py&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.edit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;auditable.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AuditableMixin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BookForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BookForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookUpdateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuditableMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UpdateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BookForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We import the &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;auditable.views&lt;/tt&gt; and make our Create and Update views
inherit from this mixin also in addition to &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt;. Pay attention that our
mixin is placed &lt;em&gt;before&lt;/em&gt; CreateView in order to call &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; in the proper order: When multiple
inheritance is used like this python will check each class from left to right to find the proper method
and call it. For example, in our &lt;tt class="docutils literal"&gt;BookCreateView&lt;/tt&gt;, when the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method is called, python
will first check if &lt;tt class="docutils literal"&gt;BookCreateView&lt;/tt&gt; has a &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method. Since it does not, it will check
if &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; has a &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method and call it. Now, we are calling the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super(...).form_valid()&lt;/span&gt;&lt;/tt&gt; in the
&lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt; &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt;, so the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; of &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt; will &lt;em&gt;also&lt;/em&gt; be&amp;nbsp;called.&lt;/p&gt;
&lt;p&gt;A simple &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt; is also added to just show the info on all&amp;nbsp;books.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="urls-py"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;urls.py&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BookCreateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BookUpdateView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BookListView&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^accounts/login/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.views.login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^accounts/logout/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.views.logout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^create/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BookCreateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;create_book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^update/(?P&amp;lt;pk&amp;gt;\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BookUpdateView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;update_book&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BookListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;book_list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just add the previously defined Create/Update/List views along with a login/logout&amp;nbsp;views.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="templates"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;templates&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You&amp;#8217;ll need four&amp;nbsp;templates:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;books/book_list.html: Show the list of&amp;nbsp;books&lt;/li&gt;
&lt;li&gt;books/book_form.html: Show the book editing&amp;nbsp;form&lt;/li&gt;
&lt;li&gt;registration/login.html: Login&amp;nbsp;form&lt;/li&gt;
&lt;li&gt;registration/logout.html: Logout&amp;nbsp;message&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-django-simple-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Using&amp;nbsp;django-simple-history&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/treyhunner/django-simple-history"&gt;django-simple-history&lt;/a&gt;  can be used to not only store the user and date of each modification
but a different version for each modification. To do that, for every model that is registered
to be used with django-simple-history, it wil create a second table in
the database hosting all versions (historical records) of that model. As we can understand this is really powerfull
since we can see exactly what was changed and also do normal &lt;span class="caps"&gt;SQL&lt;/span&gt; queries on&amp;nbsp;that!&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Installation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use django-simple-history in a project, after we do a &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;django-simple-history&lt;/span&gt;&lt;/tt&gt;,
we just need to add it to &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; and
add the &lt;tt class="docutils literal"&gt;simple_history.middleware.HistoryRequestMiddleware&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;MIDDLEWARE_CLASSES&lt;/tt&gt; list.&lt;/p&gt;
&lt;p&gt;Finally, to keep the historical records for a model, just add an instace of &lt;tt class="docutils literal"&gt;HistoricalRecords&lt;/tt&gt; to this&amp;nbsp;model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id15"&gt;Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For example, our previously defined &lt;tt class="docutils literal"&gt;Book&lt;/tt&gt; model will be modified like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;class SHBook(models.Model):
    name = models.CharField(max_length=128)
    author = models.CharField(max_length=128)

    def get_absolute_url(self):
        return reverse(&amp;quot;shbook_list&amp;quot;)

    history = HistoricalRecords()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run &lt;tt class="docutils literal"&gt;python manage.py makemigrations&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;migrate&lt;/tt&gt; this, we&amp;#8217;ll see that beyond the table for SHBook, a table for HistoricalSHBook will be&amp;nbsp;created:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Migrations for 'sample':
  0002_historicalshbook_shbook.py:
    - Create model HistoricalSHBook
    - Create model SHBook
&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s see the schema of&amp;nbsp;historicalshbook:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
CREATE TABLE &amp;quot;sample_historicalshbook&amp;quot; (
    &amp;quot;id&amp;quot; integer NOT NULL,
    &amp;quot;name&amp;quot; varchar(128) NOT NULL,
    &amp;quot;author&amp;quot; varchar(128) NOT NULL,
    &amp;quot;history_id&amp;quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT,
    &amp;quot;history_date&amp;quot; datetime NOT NULL,
    &amp;quot;history_type&amp;quot; varchar(1) NOT NULL,
    &amp;quot;history_user_id&amp;quot; integer NULL REFERENCES &amp;quot;auth_user&amp;quot; (&amp;quot;id&amp;quot;)
);
&lt;/pre&gt;
&lt;p&gt;So we see that it has the &lt;em&gt;same&lt;/em&gt; fields as with &lt;tt class="docutils literal"&gt;SHBook&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;id, name, author&lt;/tt&gt;) with the addition of
the primary key (&lt;tt class="docutils literal"&gt;history_id&lt;/tt&gt;) of this historical record, the date and user that did the change
(&lt;tt class="docutils literal"&gt;history_date&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;history_user_id&lt;/tt&gt;) and the type of the record (created / update /&amp;nbsp;delete).&lt;/p&gt;
&lt;p&gt;So, just by adding a &lt;tt class="docutils literal"&gt;HistoricalRecords()&lt;/tt&gt; attribute to our model definition we&amp;#8217;ll get complete auditing
for the instance of that&amp;nbsp;model&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Usage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To find out information about the historical records we&amp;#8217;ll just use the &lt;tt class="docutils literal"&gt;HistoricalRecords()&lt;/tt&gt; attribute
of that&amp;nbsp;model:&lt;/p&gt;
&lt;p&gt;For example, running &lt;tt class="docutils literal"&gt;SHBook.history.filter(id=1)&lt;/tt&gt; will return all historical records of the book with
&lt;tt class="docutils literal"&gt;id = 1&lt;/tt&gt;. For each one of them we have can use the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;get the user that made the change through the &lt;tt class="docutils literal"&gt;history_user&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;get the date of the change through the &lt;tt class="docutils literal"&gt;history_date&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;get the type of the change through the &lt;tt class="docutils literal"&gt;history_type&lt;/tt&gt; attribute (and the corresponding &lt;tt class="docutils literal"&gt;get_history_type_dispaly&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;get a model instance as it was then through the &lt;tt class="docutils literal"&gt;history_object&lt;/tt&gt; attribute (in order to &lt;tt class="docutils literal"&gt;save()&lt;/tt&gt; it and revert to this&amp;nbsp;version)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-django-reversion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;Using&amp;nbsp;django-reversion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/etianen/django-reversion"&gt;django-reversion&lt;/a&gt;  offers more or less the same functionality of django-simple-history by following a different philosophy:
Instead of creating an extra table holding the history records for each model, it insteads converts all the fields of each model
to json and stores that &lt;span class="caps"&gt;JSON&lt;/span&gt; in the database in a text&amp;nbsp;field.&lt;/p&gt;
&lt;p&gt;This has the advantage that no extra tables are created to the database but the disadvantage that you can&amp;#8217;t easily query
your historical records. So you may choose one or the other depending on your actual&amp;nbsp;requirements.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Installation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use django-reversion in a project, after we do a &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;django-reversion&lt;/span&gt;&lt;/tt&gt;,
we just need to add it to &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; and
add the &lt;tt class="docutils literal"&gt;reversion.middleware.RevisionMiddleware&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;MIDDLEWARE_CLASSES&lt;/tt&gt; list.&lt;/p&gt;
&lt;p&gt;In order to save the revisions of a model, you need to register this model to django-reversion. This can be
done either through the django-admin, by inheriting the admin class of that model from &lt;tt class="docutils literal"&gt;reversion.VersionAdmin&lt;/tt&gt;
or, if you don&amp;#8217;t want to use the admin by &lt;tt class="docutils literal"&gt;reversion.register&lt;/tt&gt; decorator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use django-reversion to keep track of changes to &lt;tt class="docutils literal"&gt;Book&lt;/tt&gt; we can modify it like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@reversion.register
class RBook(models.Model):
    name = models.CharField(max_length=128)
    author = models.CharField(max_length=128)

    def get_absolute_url(self):
        return reverse(&amp;quot;rbook_list&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;django-reversion uses two tables in the database to keep track of revisions: &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;version&lt;/tt&gt;. Let&amp;#8217;s
take a look at their&amp;nbsp;schemata:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.schema reversion_revision
CREATE TABLE &amp;quot;reversion_revision&amp;quot; (
    &amp;quot;id&amp;quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT,
    &amp;quot;manager_slug&amp;quot; varchar(200) NOT NULL,
    &amp;quot;date_created&amp;quot; datetime NOT NULL,
    &amp;quot;comment&amp;quot; text NOT NULL,
    &amp;quot;user_id&amp;quot; integer NULL REFERENCES &amp;quot;auth_user&amp;quot; (&amp;quot;id&amp;quot;)
);

.schema reversion_version
CREATE TABLE &amp;quot;reversion_version&amp;quot; (
    &amp;quot;id&amp;quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT,
    &amp;quot;object_id&amp;quot; text NOT NULL,
    &amp;quot;object_id_int&amp;quot; integer NULL,
    &amp;quot;format&amp;quot; varchar(255) NOT NULL,
    &amp;quot;serialized_data&amp;quot; text NOT NULL,
    &amp;quot;object_repr&amp;quot; text NOT NULL,
    &amp;quot;content_type_id&amp;quot; integer NOT NULL REFERENCES &amp;quot;django_content_type&amp;quot; (&amp;quot;id&amp;quot;),
    &amp;quot;revision_id&amp;quot; integer NOT NULL REFERENCES &amp;quot;reversion_revision&amp;quot; (&amp;quot;id&amp;quot;)
);
&lt;/pre&gt;
&lt;p&gt;As we can understand, the &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; table holds information like who created this
revison (&lt;tt class="docutils literal"&gt;user_id&lt;/tt&gt;) and when (&lt;tt class="docutils literal"&gt;date_created&lt;/tt&gt;) while the &lt;tt class="docutils literal"&gt;version&lt;/tt&gt; stores
a reference to the object that was modified (through a GenericForeignKey) and
the actual data (in the &lt;tt class="docutils literal"&gt;serialized_data&lt;/tt&gt; field). By default it uses &lt;span class="caps"&gt;JSON&lt;/span&gt;
to serialize the data (the serialization format is in the &lt;tt class="docutils literal"&gt;format&lt;/tt&gt; field). There&amp;#8217;s
an one-to-one relation between &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;version&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If we create an instance of &lt;tt class="docutils literal"&gt;RBook&lt;/tt&gt; we&amp;#8217;ll see the following in the&amp;nbsp;database:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
sqlite&amp;gt; select * from reversion_revision;
1|default|2015-01-21 10:31:25.233000||1

sqlite&amp;gt; select * from reversion_version;
1|1|1|json|[{&amp;quot;fields&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;asdasdasd&amp;quot;, &amp;quot;author&amp;quot;: &amp;quot;asdasd&amp;quot;}, &amp;quot;model&amp;quot;: &amp;quot;sample.rbook&amp;quot;, &amp;quot;pk&amp;quot;: 1}]|RBook object|12|1
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;date_created&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;user_id&lt;/tt&gt; are stored on &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; while &lt;tt class="docutils literal"&gt;format&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;serialized_data&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;content_type_id&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;object_id_int&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;GenericForeignKey&lt;/tt&gt;) are stored in &lt;tt class="docutils literal"&gt;version&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;Usage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To find out information about an object you have to use the &lt;tt class="docutils literal"&gt;reversion.get_for_object(object)&lt;/tt&gt; method. In order to be
easily used in templates I recommend creating the following &lt;tt class="docutils literal"&gt;get_versions()&lt;/tt&gt; method in each model that is registered with&amp;nbsp;django-reversion&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_versions(self):
    return reversion.get_for_object(self)
&lt;/pre&gt;
&lt;p&gt;Now, each version has a &lt;tt class="docutils literal"&gt;revision&lt;/tt&gt; attribute for the corresponding revision and can be used to do the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;get the user that made the change through the &lt;tt class="docutils literal"&gt;revision.user&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;get the date of the change through the &lt;tt class="docutils literal"&gt;revision.date_created&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;get the values of the object fields as they were in this revision using the &lt;tt class="docutils literal"&gt;field_dict&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;get a model instance as it was on that revision using the &lt;tt class="docutils literal"&gt;object_version.object&lt;/tt&gt; attribute&lt;/li&gt;
&lt;li&gt;revert to that previous version of that object using the &lt;tt class="docutils literal"&gt;rever()&lt;/tt&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id21"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the above we say that it is really easy to add basic (&lt;em&gt;who&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt;) auditing capabilities to your models: You just need to
inherit your models from the &lt;tt class="docutils literal"&gt;Auditable&lt;/tt&gt; abstract class and inherit your Create and Update CBVs from &lt;tt class="docutils literal"&gt;AuditableMixin&lt;/tt&gt;.
If you want to know exactly &lt;em&gt;what&lt;/em&gt; was changed then you have two solutions: django-simple-history to create an extra table for
each of your models so you&amp;#8217;ll be able to query your historical records (and easily extra aggregates, statistics etc) and
django-reversion to save each version as a json object, so no extra tables will be&amp;nbsp;created.&lt;/p&gt;
&lt;p&gt;All three solutions for auditing have been implemented in a sample project at &lt;a class="reference external" href="https://github.com/spapas/auditing-sample"&gt;https://github.com/spapas/auditing-sample&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can clone the project and, preferrably in a virtual environment, install requirements (&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;),
do a migrate (&lt;tt class="docutils literal"&gt;python manage.py migrate&lt;/tt&gt; &amp;#8212; uses sqlite3 by default) and run the local development
server (&lt;tt class="docutils literal"&gt;python manage.py ruinserver&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Wed, 21 Jan 2015 14:20:00 +0200</pubDate><guid>tag:spapas.github.io,2015-01-21:2015/01/21/django-model-auditing/</guid><category>django</category><category>python</category><category>auditing</category></item><item><title>Change the primary color of bootstrap materialÂ design</title><link>http://spapas.github.io/2014/12/16/change-bootstrap-material-primary-color/</link><description>&lt;div class="section" id="warning-updated-on-05-february-2015"&gt;
&lt;h2&gt;Warning - updated on 05 February&amp;nbsp;2015&lt;/h2&gt;
&lt;p&gt;I recently noticed (to my surprise) that bootstrap-material-design has a not-very-open license
(&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design/blob/master/LICENSE.md"&gt;https://github.com/FezVrasta/bootstrap-material-design/blob/master/&lt;span class="caps"&gt;LICENSE&lt;/span&gt;.md&lt;/a&gt;).
Quoting from&amp;nbsp;there:&lt;/p&gt;
&lt;blockquote&gt;
You can use this software for free only for no-profit projects. If you&amp;#8217;d like to use this software in a commercial project you may contact the author (Federico Zivolo) of the software and ask for his permission and fulfill his conditions.&lt;/blockquote&gt;
&lt;p&gt;This is a more general comment, but for me, if you want to develop an open source
project and receive contributions from people not belonging to your company then you
&lt;em&gt;need&lt;/em&gt; to have a real Open Source License like Apache, &lt;span class="caps"&gt;MIT&lt;/span&gt;, &lt;span class="caps"&gt;BSD&lt;/span&gt; or &lt;span class="caps"&gt;LGPL&lt;/span&gt; (no, I don&amp;#8217;t
consider &lt;span class="caps"&gt;GPL&lt;/span&gt; to be really &lt;em&gt;open&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;When people are contributing to an open source project they are doing it because most
of the times they want to use this project and &lt;em&gt;their&lt;/em&gt; contributions to their own
projects which (most probably) are commercial, so people contributing to
bootstrap-material-design won&amp;#8217;t be able to use it in their own&amp;nbsp;projects!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After this, I recommend people to avoid contributing to and using django-material-design
for their own&amp;nbsp;projects.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design"&gt;Bootstrap Material Design&lt;/a&gt; is a great theme that sits on top of &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and transforms it to
&lt;a class="reference external" href="http://www.google.com/design/spec/material-design/introduction.html"&gt;Material Design&lt;/a&gt;! The great thing about Bootstrap Material Design is that you just need to include
its css and js files after your Bootstrap files and&amp;nbsp;&amp;#8230;&lt;/p&gt;
&lt;p&gt;boom! Your page is Material Design&amp;nbsp;compatible!&lt;/p&gt;
&lt;object data="https://google.github.io/material-design-icons/action/svg/ic_thumb_up_24px.svg" type="image/svg+xml"&gt;
&lt;/object&gt;
&lt;p&gt;A nice feature of Bootstrap Material Design is that you can change its default color to a new one (I
don&amp;#8217;t really like the current - greenish one). This is easy for people with less skills however I
found it rather challenging when I tried it. That&amp;#8217;s why I will present a step by step tutorial on
changing the default primary color of the Bootstrap Material Design&amp;nbsp;theme:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-get-the-code"&gt;
&lt;h2&gt;Step 1: Get the&amp;nbsp;code&lt;/h2&gt;
&lt;p&gt;Use git to make a local clone of the project with &lt;tt class="docutils literal"&gt;git clone &lt;span class="pre"&gt;https://github.com/FezVrasta/bootstrap-material-design.git&lt;/span&gt;&lt;/tt&gt;. This will create a directory
named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bootstrap-material-design&lt;/span&gt;&lt;/tt&gt;. Or you can download the latest version of the code using (&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design/archive/master.zip"&gt;https://github.com/FezVrasta/bootstrap-material-design/archive/master.zip&lt;/a&gt;)
and unzip it to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bootstrap-material-design&lt;/span&gt;&lt;/tt&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-install-node-js-and-npm"&gt;
&lt;h2&gt;Step 2: Install node.js and&amp;nbsp;npm&lt;/h2&gt;
&lt;p&gt;You need to have &lt;a class="reference external" href="http://nodejs.org/"&gt;node.js&lt;/a&gt; and npm installed in your system - this is something very easy so I won&amp;#8217;t go into any details about this. After you have installed
both node.js and npm you need to put them in your path so that you&amp;#8217;ll be able to run &lt;tt class="docutils literal"&gt;npm &lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt; without errors and receive something like &lt;tt class="docutils literal"&gt;1.4.14&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-less"&gt;
&lt;h2&gt;Step 3: Install&amp;nbsp;less&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://lesscss.org/"&gt;less&lt;/a&gt; is a &lt;span class="caps"&gt;CSS&lt;/span&gt; preprocessor in which Bootstrap Material Design has been written. To install it, just enter the command &lt;tt class="docutils literal"&gt;npm install &lt;span class="pre"&gt;-g&lt;/span&gt; less&lt;/tt&gt;. After that
you should have a command named &lt;tt class="docutils literal"&gt;lessc&lt;/tt&gt; which, when run would output something like: &lt;tt class="docutils literal"&gt;lessc 2.1.1 (Less Compiler) [JavaScript]&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-create-the-customizations-files"&gt;
&lt;h2&gt;Step 4: Create the customizations&amp;nbsp;files&lt;/h2&gt;
&lt;p&gt;Go to the directory where you cloned (or unzipped) the Bootstrap Material Design code and create a file named &lt;tt class="docutils literal"&gt;custom.less&lt;/tt&gt; (so, that file should be
in the same folder as with &lt;tt class="docutils literal"&gt;bower.json&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Gruntfile.js&lt;/tt&gt; etc) with the following&amp;nbsp;contents:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;import &amp;quot;less/material.less&amp;quot;;

// Override &amp;#64;primary color with one took from _colors.less
&amp;#64;primary: &amp;#64;indigo;
&lt;/pre&gt;
&lt;p&gt;(I wanted to use the indigo color as my primary one - you may of course use whichever color from the ones defined in &lt;tt class="docutils literal"&gt;less/_variables.less&lt;/tt&gt; you&amp;nbsp;like)&lt;/p&gt;
&lt;p&gt;This file may contain other default values for variables - if I find anything useful I will add it to this post (also please reply with any&amp;nbsp;recommendations).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-create-your-custom-material-css-file"&gt;
&lt;h2&gt;Step 5: Create your custom material css&amp;nbsp;file&lt;/h2&gt;
&lt;p&gt;Finally, run the following command: &lt;tt class="docutils literal"&gt;lessc custom.less&amp;nbsp; &amp;gt; &lt;span class="pre"&gt;material-custom.css&lt;/span&gt;&lt;/tt&gt;. This will create a file named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;material-custom.css&lt;/span&gt;&lt;/tt&gt; that contains your
custom version of Bootstrap Material Design! If you want your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;material-custom.css&lt;/span&gt;&lt;/tt&gt; to be compressed, add the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt; option like this:  &lt;tt class="docutils literal"&gt;lessc &lt;span class="pre"&gt;-x&lt;/span&gt; custom.less&amp;nbsp; &amp;gt; &lt;span class="pre"&gt;material-custom.css&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;You may now include &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;material-custom.css&lt;/span&gt;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;material.css&lt;/tt&gt; (or the minified version of it) to your projects and you&amp;#8217;ll have your own primary&amp;nbsp;color!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Tue, 16 Dec 2014 16:20:00 +0200</pubDate><guid>tag:spapas.github.io,2014-12-16:2014/12/16/change-bootstrap-material-primary-color/</guid><category>css</category><category>design</category><category>boostrap-material-design</category><category>less</category><category>node.js</category></item><item><title>Retrieving Gmail blockedÂ attachments</title><link>http://spapas.github.io/2014/10/23/retrieve-gmail-blocked-attachments/</link><description>&lt;p&gt;Before services like Dropbox were widely available, some people (including me) were using
their Gmail account as a primitive backup solution: Compress your directory and send it to
your gmail. There. Backup&amp;nbsp;complete.&lt;/p&gt;
&lt;p&gt;However, nothing is so&amp;nbsp;easy&amp;#8230;&lt;/p&gt;
&lt;p&gt;Recently, I wanted to retrieve one of these backups, a .rar containing the complete
source code (since it was written in TeX) of my PhD thesis. The problem was that Gmail blocked the access to these attachments&amp;nbsp;saying&lt;/p&gt;
&lt;blockquote&gt;
Anti-virus warning - 1 attachment contains a virus or blocked file. Downloading this attachment is disabled.&lt;/blockquote&gt;
&lt;p&gt;probably because I had a number of .bat files inside that .rar archive to automate my work&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;Now what&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;After searching the internet and not founding any solutions, I tried the options that gmail gives for each email. One
particular one cought my interest: &lt;em&gt;Show&amp;nbsp;original&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Here it is!" src="/images/show_original.png" style="width: 780px;" /&gt;
&lt;p&gt;Clicking this option opened a text file with the original, &lt;span class="caps"&gt;MIME&lt;/span&gt; encoded message. The interesting thing of course&amp;nbsp;was&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
------=_NextPart_000_004F_01CA0AED.E63C2A30
Content-Type: application/octet-stream;
      name=&amp;quot;phdstuff.rar&amp;quot;
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
      filename=&amp;quot;phdstuff.rar&amp;quot;

UmFyIRoHAM+QcwAADQAAAAAAAAB0f3TAgCwANAMAAFQEAAACRbXCx8lr9TodMwwAIAAAAG5ld2Zp
bmFsLnR4dA3dEQzM082BF7sB+D3q6QPUNEfwG7vHQgNkiQDTkGvfhOE4mNltIJJlBFMOCQPzPeKD
...
&lt;/pre&gt;
&lt;p&gt;So the whole attachment was contained in that text file, encoded in base64! Now I just
needed to extract it from the email and convert it back to&amp;nbsp;binary.&lt;/p&gt;
&lt;p&gt;This was very easy to do using Python - some people &lt;a class="reference external" href="http://stackoverflow.com/questions/4067937/getting-mail-attachment-to-python-file-object"&gt;had already asked the same thing on &lt;span class="caps"&gt;SO&lt;/span&gt;&lt;/a&gt;.
So here&amp;#8217;s a simple program that gets an email in text/mime format as input and dumps all&amp;nbsp;attachments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Please enter a file to extract attachments from&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c"&gt;# if it is an attachment&lt;/span&gt;
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_filename&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save this to a file named &lt;tt class="docutils literal"&gt;get_attachments.py&lt;/tt&gt; and, after saving the original message to a file
named &lt;tt class="docutils literal"&gt;0.txt&lt;/tt&gt; run &lt;tt class="docutils literal"&gt;python get_attachments.py 0.txt&lt;/tt&gt; and you&amp;#8217;ll see the attachments of your email in the same&amp;nbsp;folder!&lt;/p&gt;
&lt;blockquote&gt;
Disclaimer: I have to warn you that since Gmail claims that an attachment is &lt;em&gt;not safe&lt;/em&gt; it may be &lt;strong&gt;actually not safe&lt;/strong&gt;. So
you must be 100% sure that you know what you are doing before retrievening your email attachments like this.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Stefan &lt;a class="reference external" href="https://gist.github.com/stefansundin/a99bbfb6cda873d14fd2"&gt;created an improved version&lt;/a&gt; of the attachment extractor which is also compatible with Python&amp;nbsp;3.4!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 12 January 2015&lt;/strong&gt;: Ivana (at the comments section) proposed a different solution that may work
for some files: &lt;em&gt;Use a mobile Gmail client (I tested it with Android) and &amp;quot;Save to Drive&amp;quot; your attachment.
You&amp;#8217;ll then be able to download it from the Google&amp;nbsp;Drive!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I am not sure if this works for all attachments,
however it worked for the source of my PhD thesis! I&amp;#8217;m writing it may not work for all attachments because
when you download something from Google Drive it does a virus check so it may not allow you to download the
attachment and then  you&amp;#8217;ll still need to do it manually using the method below (however &lt;strong&gt;in that case you
must be even more cautious for the case the attachment actualyl contains a malicious file&lt;/strong&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Thu, 23 Oct 2014 14:20:00 +0300</pubDate><guid>tag:spapas.github.io,2014-10-23:2014/10/23/retrieve-gmail-blocked-attachments/</guid><category>gmail</category><category>python</category><category>security</category><category>google</category></item><item><title>Django non-HTMLÂ responses</title><link>http://spapas.github.io/2014/09/15/django-non-html-responses/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#how-are-cbvs-rendered" id="id2"&gt;How are CBVs&amp;nbsp;rendered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rendering-to-non-html" id="id3"&gt;Rendering to non-&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-non-html-mixin" id="id4"&gt;A non-&lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;mixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-more-complex-example" id="id5"&gt;A more complex&amp;nbsp;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id6"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have already written about the many advantages (&lt;span class="caps"&gt;DRY&lt;/span&gt;!) of using &lt;a class="reference external" href="http://spapas.github.io/2014/04/11/django-generic-formviews-for-objects/"&gt;CBVs in a previous article.&lt;/a&gt;
In this article I will present the correct (pythonic) way to allow a normal &lt;span class="caps"&gt;CBV&lt;/span&gt; to return non-&lt;span class="caps"&gt;HTML&lt;/span&gt; responses, like &lt;span class="caps"&gt;PDF&lt;/span&gt;, &lt;span class="caps"&gt;CSV&lt;/span&gt;, &lt;span class="caps"&gt;XSL&lt;/span&gt;&amp;nbsp;etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-are-cbvs-rendered"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;How are CBVs&amp;nbsp;rendered&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before proceeding, we need to understand how CBVs are rendered. By walking through the
class hierarchy in the &lt;a class="reference external" href="http://ccbv.co.uk/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; inspector&lt;/a&gt;, we can see that
all the normal Django CBVs (DetailView, CreateView, TemplateView etc) are using a mixin
named &lt;a class="reference external" href="http://ccbv.co.uk/projects/Django/1.7/django.views.generic.base/TemplateResponseMixin/"&gt;TemplateResponseMixin&lt;/a&gt; which defines a method named &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt;. This
is the method that is used for rendering the output of the Views. Let&amp;#8217;s take a look at
&lt;a class="reference external" href="http://ccbv.co.uk/projects/Django/1.7/django.views.generic.base/TemplateResponseMixin/"&gt;how it is defined&lt;/a&gt; (I&amp;#8217;ll remove the&amp;nbsp;comments):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TemplateResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
  &lt;span class="n"&gt;response_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TemplateResponse&lt;/span&gt;
  &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
          &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_template_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ImproperlyConfigured&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;&amp;quot;TemplateResponseMixin requires either a definition of &amp;quot;&lt;/span&gt;
              &lt;span class="s"&gt;&amp;quot;&amp;#39;template_name&amp;#39; or an implementation of &amp;#39;get_template_names()&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method will try to find out which html template should be used to render the View
(using the  &lt;tt class="docutils literal"&gt;get_template_names&lt;/tt&gt; method and template_name attribute of the mixin) and
then render this view by instantiating an instance of the &lt;tt class="docutils literal"&gt;TemplateResponse&lt;/tt&gt; class
(as defined in the &lt;tt class="docutils literal"&gt;response_class&lt;/tt&gt; attribute)
and passing the request, template, context and other response_args to&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/django/django/blob/master/django/template/response.py"&gt;TemplateResponse&lt;/a&gt; class which is instantiated in the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method
inherits from a normal &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; and is used to render
the template passed to it as a&amp;nbsp;parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rendering-to-non-html"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Rendering to non-&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;From the previous discussion we can conclude that if your non-&lt;span class="caps"&gt;HTML&lt;/span&gt; response &lt;em&gt;needs&lt;/em&gt;
a template then you just need to create a subclass of &lt;tt class="docutils literal"&gt;TemplateResponse&lt;/tt&gt; and
assign it to the &lt;tt class="docutils literal"&gt;response_class&lt;/tt&gt; attribute (and also change the &lt;tt class="docutils literal"&gt;content_type&lt;/tt&gt;
attribute). On the other hand, if your non-&lt;span class="caps"&gt;HTML&lt;/span&gt; respond does not need a template
to be rendered then you have to override &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; completely
(since the template parameter does not need to be passed now) and either define
a subclass of HttpResponse or do the rendering in the&amp;nbsp;render_to_response.&lt;/p&gt;
&lt;p&gt;Since almost always you won&amp;#8217;t need a template to create a non-&lt;span class="caps"&gt;HTML&lt;/span&gt; view and because
I believe that the solution is &lt;span class="caps"&gt;DRY&lt;/span&gt;-enough by implementing the rendering code to
the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method (&lt;em&gt;without&lt;/em&gt; subclassing &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt;) I will
implement a mixin that does exactly&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Subclassing &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; will not make our design more &lt;span class="caps"&gt;DRY&lt;/span&gt; because for every
subclass of &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method would also need to
be modified (by subclassing &lt;tt class="docutils literal"&gt;TemplateResponseMixin) to instantiate the subclass of ``HttpResponse&lt;/tt&gt; with the correct parameters.
For instance, the existing &lt;tt class="docutils literal"&gt;TemplateResponseMixin&lt;/tt&gt; cannot be used if the subclass
of &lt;tt class="docutils literal"&gt;HttpResponse&lt;/tt&gt; does not take a template as a parameter (solutions like
passing None to the template parameter are signals of bad&amp;nbsp;design).&lt;/p&gt;
&lt;p&gt;In any case, changing just the &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method using a Mixin is in my opinion the best solution
to the above problem.
A &lt;a class="reference external" href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful"&gt;Mixin&lt;/a&gt; is a simple class that can be used to extend other classes either by overriding functionality of the base class or
by adding extra features. Django CBVs use various &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/class-based-views/mixins/"&gt;mixins&lt;/a&gt; to extend the base Views and add&amp;nbsp;functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-non-html-mixin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;A non-&lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;mixin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So, a basic skeleton for our mixin would be something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NonHtmlResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The previous mixin overrides the render_to_response method to just return the text &amp;quot;Hello, world&amp;quot;. For instance
we could define the following&amp;nbsp;class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyTextResponseView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NonHtmlResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
  &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which can be added as a route to &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt; (using the &lt;tt class="docutils literal"&gt;as_view&lt;/tt&gt; method) and will always return the &amp;quot;Hello, world&amp;quot;&amp;nbsp;text.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s something more complicated: A Mixin that can be used along with a DetailView and will output the properties of the
object as&amp;nbsp;text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextPropertiesResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/plain; charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;{0}: {1}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and can be used like&amp;nbsp;this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextPropertiesDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextPropertiesResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FooDetailView&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
  &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above mixin will use the get_object() method of the DetailView to get the object and then output
it as text. We can create similar mixins that will integrate with other types of CBVs, for instance
to export a ListView as an &lt;span class="caps"&gt;CSV&lt;/span&gt; or generate an png from a DetailView of an Image&amp;nbsp;file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-complex-example"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;A more complex&amp;nbsp;example&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous examples all built upon an existing view (either a TemplateView, a DetailView or a ListView).
However, an existing view that will fit our requirements won&amp;#8217;t always be available. For instance,
sometimes I want to export data from my database using a raw &lt;span class="caps"&gt;SQL&lt;/span&gt; query. Also I&amp;#8217;d like to be able to easily
export this data as csv or&amp;nbsp;excel.&lt;/p&gt;
&lt;p&gt;First of all, we need to define a view that will inherit from &lt;tt class="docutils literal"&gt;View&lt;/tt&gt; and export the data as a &lt;span class="caps"&gt;CSV&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unicodecsv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvRawSqlExportView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;select 1+1&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;res&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
              &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

      &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/plain; charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;attachment; filename=export.csv&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unicodecsv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above View has three attributes:
* sql, which is a string with the raw sql that will be executed
* headers, which is an array with the names of each header of the resulting data
* params, which is an array with parameters that may need to be passed to the&amp;nbsp;query&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; method executes the query and passes the result to &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt;
using a generator.  The &lt;tt class="docutils literal"&gt;render_to_response&lt;/tt&gt; method instantiates an HttpResponse
object with the correct attributes and writes the &lt;span class="caps"&gt;CSV&lt;/span&gt; to the response object using&amp;nbsp;unicodecsv.&lt;/p&gt;
&lt;p&gt;We can now quickly create a route that will export data from the users&amp;nbsp;table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;r&amp;#39;^raw_export_users/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CsvRawSqlExportView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select id, username from auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;raw_export_users&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If instead of &lt;span class="caps"&gt;CSV&lt;/span&gt; we wanted to export to &lt;span class="caps"&gt;XLS&lt;/span&gt; (using xlwt), we&amp;#8217;d just need to create a&amp;nbsp;Mixin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XlsRawSqlResponseMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;response_kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;application/ms-excel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;attachment; filename=export.xls&amp;#39;&lt;/span&gt;
      &lt;span class="n"&gt;wb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xlwt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Workbook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_sheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and create a View that inherits from &lt;tt class="docutils literal"&gt;CsvRawSqlExportView&lt;/tt&gt; and uses the above&amp;nbsp;mixin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XlsRawSqlExportView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;XlsRawSqlResponseMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CsvRawSqlExportView&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and route to that view to get the &lt;span class="caps"&gt;XLS&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;r&amp;#39;^raw_export_users/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XlsRawSqlExportView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select id, username from auth_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;raw_export_users&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the above techniques we can define CBVs that will output their content in various content types
beyond &lt;span class="caps"&gt;HTML&lt;/span&gt;. This will help us write write clean and &lt;span class="caps"&gt;DRY&lt;/span&gt;&amp;nbsp;code.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Mon, 15 Sep 2014 14:20:00 +0300</pubDate><guid>tag:spapas.github.io,2014-09-15:2014/09/15/django-non-html-responses/</guid><category>django</category><category>python</category><category>cbv</category><category>class-based-views</category></item><item><title>Implementing a simple, Heroku-hosted REST service using Flask andÂ mongoDB</title><link>http://spapas.github.io/2014/06/30/rest-flask-mongodb-heroku/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#requirements" id="id2"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#implementing-the-rest-service" id="id3"&gt;Implementing the &lt;span class="caps"&gt;REST&lt;/span&gt;&amp;nbsp;service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#testing-it-locally" id="id4"&gt;Testing it&amp;nbsp;locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#deploying-to-heroku" id="id5"&gt;Deploying to&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the following, I will describe how I used &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, a very nice web &lt;em&gt;microframework&lt;/em&gt; for python along  with &lt;a class="reference external" href="http://www.mongodb.org/"&gt;mongoDB&lt;/a&gt;, the most
popular No-&lt;span class="caps"&gt;SQL&lt;/span&gt; database to implement a simple &lt;span class="caps"&gt;REST&lt;/span&gt; service that was hosted on &lt;a class="reference external" href="https://dashboard.heroku.com/apps"&gt;Heroku&lt;/a&gt;. This &lt;span class="caps"&gt;REST&lt;/span&gt; service would get readings from
a number of sensors from an Android&amp;nbsp;device.&lt;/p&gt;
&lt;p&gt;I chose Flask instead of Django mainly because the &lt;span class="caps"&gt;REST&lt;/span&gt; service that I needed to implement would be very simple and most of
the Django bells and whistles (&lt;span class="caps"&gt;ORM&lt;/span&gt;, auth, admin, etc) wouldn&amp;#8217;t be needed anyway. Also, Flask is much quicker to set-up than
Django since almost everything (views, urls, etc) can be put inside one python&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;Concerning the choice of a NoSQL persistance solution (mongoDB), I wanted to have a table (or collection as it is called in the
mongoDB world) of readings from the sensor. Each reading would just have a timestamp and various other
arbitrary data depending on the type of the reading, so saving it as a &lt;span class="caps"&gt;JSON&lt;/span&gt; document in a NoSQL database is a good&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;Finally, all the above will be deployed to Heroku which offers some great services for deploying python code in the&amp;nbsp;cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I propose creating a file named &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; that will host the required packages for your project, so you will be
able to setup your projects after creating a virtual environment with &lt;a class="reference external" href="http://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt; just by running &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;.
Also, the requirements.txt is required for deploying python to&amp;nbsp;Heroku.&lt;/p&gt;
&lt;p&gt;So, for my case, the contents of requirements.txt are the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Flask==0.10.1
Flask-PyMongo==0.3.0
Flask-RESTful==0.2.12
Jinja2==2.7.3
MarkupSafe==0.23
Werkzeug==0.9.6
aniso8601==0.82
gunicorn==19.0.0
itsdangerous==0.24
pymongo==2.7.1
pytz==2014.4
six==1.7.2
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Flask-PyMongo is a simple wrapper for Flask around pymongo which is the python mongoDB&amp;nbsp;driver.&lt;/li&gt;
&lt;li&gt;Flask-RESTful is a simple library for creating &lt;span class="caps"&gt;REST&lt;/span&gt; APIs - it needs aniso8601 and&amp;nbsp;pytz.&lt;/li&gt;
&lt;li&gt;Jinja2 is the template library for Flask (we won&amp;#8217;t use it but it is required by Flask installation) - it needs&amp;nbsp;MarkupSafe.&lt;/li&gt;
&lt;li&gt;Werkzeug is a &lt;span class="caps"&gt;WSGI&lt;/span&gt; utility library - required by&amp;nbsp;Flask&lt;/li&gt;
&lt;li&gt;gunicorn is a &lt;span class="caps"&gt;WSGI&lt;/span&gt; &lt;span class="caps"&gt;HTTP&lt;/span&gt; server - needed for deployment to&amp;nbsp;Heroku&lt;/li&gt;
&lt;li&gt;itsdangerous is used to sign data for usage in untrusted&amp;nbsp;environments&lt;/li&gt;
&lt;li&gt;six is the python 2/3 compatibility&amp;nbsp;layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-the-rest-service"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Implementing the &lt;span class="caps"&gt;REST&lt;/span&gt;&amp;nbsp;service&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Instead of using just one single file for our Flask web application, we will create a python module to contain it and a
file named &lt;tt class="docutils literal"&gt;runserver.py&lt;/tt&gt; that will start a local development server to test&amp;nbsp;it:&lt;/p&gt;
&lt;p&gt;So, in the same folder as the &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; create a folder named &lt;tt class="docutils literal"&gt;flask_rest_service&lt;/tt&gt; and in there put
two files: &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;resources.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; initializes our Flask application, our mongoDB connection and our Flask-RESTful&amp;nbsp;api:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import os
from flask import Flask
from flask.ext import restful
from flask.ext.pymongo import PyMongo
from flask import make_response
from bson.json_util import dumps

MONGO_URL = os.environ.get('MONGO_URL')
if not MONGO_URL:
    MONGO_URL = &amp;quot;mongodb://localhost:27017/rest&amp;quot;;

app = Flask(__name__)

app.config['MONGO_URI'] = MONGO_URL
mongo = PyMongo(app)

def output_json(obj, code, headers=None):
    resp = make_response(dumps(obj), code)
    resp.headers.extend(headers or {})
    return resp

DEFAULT_REPRESENTATIONS = {'application/json': output_json}
api = restful.Api(app)
api.representations = DEFAULT_REPRESENTATIONS

import flask_rest_service.resources
&lt;/pre&gt;
&lt;p&gt;So what happens here? After the imports, we check if we have a MONGO_URL environment variable. This is
how we set options in Heroku. If such option does not exist in the environment then we are in our
development environment so we set it to the localhost (we must have a running mongoDB installation in
our dev&amp;nbsp;environment).&lt;/p&gt;
&lt;p&gt;In the next lines, we initialize our Flask application and our mongoDB connection (pymongo
uses a &lt;tt class="docutils literal"&gt;MONGO_URI&lt;/tt&gt; configuration option to know the database &lt;span class="caps"&gt;URI&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;output_json&lt;/tt&gt; is used to dump the &lt;span class="caps"&gt;BSON&lt;/span&gt; encoded mongoDB objects to &lt;span class="caps"&gt;JSON&lt;/span&gt; and was borrowed from
&lt;a class="reference external" href="http://blog.alienretro.com/using-mongodb-with-flask-restful/"&gt;alienretro&amp;#8217;s blog&lt;/a&gt; &amp;#8212; we initialize our restful &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; with this&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;Finally, we import the &lt;tt class="docutils literal"&gt;resources.py&lt;/tt&gt; module which actually defines our &lt;span class="caps"&gt;REST&lt;/span&gt;&amp;nbsp;resources.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import json
from flask import request, abort
from flask.ext import restful
from flask.ext.restful import reqparse
from flask_rest_service import app, api, mongo
from bson.objectid import ObjectId

class ReadingList(restful.Resource):
    def __init__(self, *args, **kwargs):
        self.parser = reqparse.RequestParser()
        self.parser.add_argument('reading', type=str)
        super(ReadingList, self).__init__()

    def get(self):
        return  [x for x in mongo.db.readings.find()]

    def post(self):
        args = self.parser.parse_args()
        if not args['reading']:
            abort(400)

        jo = json.loads(args['reading'])
        reading_id =  mongo.db.readings.insert(jo)
        return mongo.db.readings.find_one({&amp;quot;_id&amp;quot;: reading_id})


class Reading(restful.Resource):
    def get(self, reading_id):
        return mongo.db.readings.find_one_or_404({&amp;quot;_id&amp;quot;: reading_id})

    def delete(self, reading_id):
        mongo.db.readings.find_one_or_404({&amp;quot;_id&amp;quot;: reading_id})
        mongo.db.readings.remove({&amp;quot;_id&amp;quot;: reading_id})
        return '', 204


class Root(restful.Resource):
    def get(self):
        return {
            'status': 'OK',
            'mongo': str(mongo.db),
        }

api.add_resource(Root, '/')
api.add_resource(ReadingList, '/readings/')
api.add_resource(Reading, '/readings/&amp;lt;ObjectId:reading_id&amp;gt;')
&lt;/pre&gt;
&lt;p&gt;Here we define three &lt;tt class="docutils literal"&gt;Resource&lt;/tt&gt; classes and add them to our previously defined &lt;tt class="docutils literal"&gt;api&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;Root&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Reading&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ReadingList&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Root&lt;/tt&gt; just returns a dictionary with an &lt;span class="caps"&gt;OK&lt;/span&gt; status and some info on our mongodb&amp;nbsp;connection.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Reading&lt;/tt&gt; has gets an ObjectId
(which is the mongodb primary key) as a parameter and depending on the &lt;span class="caps"&gt;HTTP&lt;/span&gt; operation, it returns the reading with that
id when receiving an &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; and deletes the reading with that id when receiving an &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;DELETE&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ReadingList&lt;/tt&gt; will return all readings when receiving an &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; and will create a new reading when
receiving an &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/tt&gt; The &lt;tt class="docutils literal"&gt;post&lt;/tt&gt; function uses the parser defined in &lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; which requires
a &lt;tt class="docutils literal"&gt;reading&lt;/tt&gt; parameter with the actual reading to be&amp;nbsp;inserted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-it-locally"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Testing it&amp;nbsp;locally&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to run the development server, you will need to install and start mongodb locally which is beyond the scope of this post. After that
create a file named &lt;tt class="docutils literal"&gt;runserver.py&lt;/tt&gt; in the same folder as with the &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;
and the &lt;tt class="docutils literal"&gt;flask_rest_service&lt;/tt&gt; folder. The contents of this file should&amp;nbsp;be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from flask_rest_service import app
app.run(debug=True)
&lt;/pre&gt;
&lt;p&gt;When you run this file with &lt;tt class="docutils literal"&gt;python runserver.py&lt;/tt&gt; you should be able top visit your rest service at &lt;a class="reference external" href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt; and get
an &amp;quot;&lt;span class="caps"&gt;OK&lt;/span&gt;&amp;quot;&amp;nbsp;status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deploying-to-heroku"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Deploying to&amp;nbsp;Heroku&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To deploy to Heroku, you must create a &lt;tt class="docutils literal"&gt;Procfile&lt;/tt&gt; that contains the workers of your application. In our case, the
&lt;tt class="docutils literal"&gt;Procfile&lt;/tt&gt; should contain the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
web: gunicorn flask_rest_service:app
&lt;/pre&gt;
&lt;p&gt;Also, you should add a .gitignore file with the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
*.pyc
&lt;/pre&gt;
&lt;p&gt;Finally, to deploy your application to Heroku you can follow the instructions here: &lt;a class="reference external" href="https://devcenter.heroku.com/articles/getting-started-with-python"&gt;https://devcenter.heroku.com/articles/getting-started-with-python&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initialize a git repository and commit&amp;nbsp;everything:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
git init
git add .
git commit -m
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a new Heroku application (after logging in to heroku with &lt;tt class="docutils literal"&gt;heroku login&lt;/tt&gt;) and set the MONGO_URL environment variable (of course you have to obtain ths MONGO_URL variable for your heroku envirotnment by adding a mongoDB&amp;nbsp;database):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
heroku create
heroku config:set MONGO_URL=mongodb://user:pass&amp;#64;mongoprovider.com:27409/rest
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;And finally push your master branch to the heroku remote&amp;nbsp;repository:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
git push heroku master
&lt;/pre&gt;
&lt;p&gt;If everything went ok you should be able to start a worker for your application, check that the worker is running, and finally visit&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
heroku ps:scale web=1
heroku ps
heroku open
&lt;/pre&gt;
&lt;p&gt;If everything was ok you should see an status-&lt;span class="caps"&gt;OK&lt;/span&gt; &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Mon, 30 Jun 2014 15:23:00 +0300</pubDate><guid>tag:spapas.github.io,2014-06-30:2014/06/30/rest-flask-mongodb-heroku/</guid><category>flask</category><category>mongodb</category><category>heroku</category><category>python</category><category>rest</category></item><item><title>Django generic FormViews forÂ objects</title><link>http://spapas.github.io/2014/04/11/django-generic-formviews-for-objects/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-quick-introduction-to-the-formview" id="id2"&gt;A quick introduction to the &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-quick-introduction-to-the-singleobjectmixin" id="id3"&gt;A quick introduction to the &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#being-generic-and-dry" id="id4"&gt;Being generic and &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#being-more-generic-and-dry" id="id5"&gt;Being more generic and &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#other-options" id="id6"&gt;Other&amp;nbsp;options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We recently needed to create a number of views for changing the status of an Application model instance for our organization.
An Application model instance can be filled and then cancelled, submitted, acceptted etc - for each of these status changes a form should be
presented to the user. When the user submits the form the status of the Application will be&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;To implement the above requirement we created a generic FormView that acts on the specific model instance. This
used two basic &lt;span class="caps"&gt;CBV&lt;/span&gt; components: The &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; for the form manipulation and the &lt;tt class="docutils literal"&gt;SingleObjectMixing&lt;/tt&gt; for the
object&amp;nbsp;handling.&lt;/p&gt;
&lt;p&gt;Django &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/class-based-views/"&gt;Class Based Views&lt;/a&gt; (CBVs) can be used to create reusable Views using normal class inheritance. Most
people use the well-known &lt;tt class="docutils literal"&gt;CreateView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;UpdateView&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DetailView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ListView&lt;/tt&gt;, however, as we
will see below, the &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; will help us write &lt;span class="caps"&gt;DRY&lt;/span&gt;&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;I have to notice here that an invaluable tool to help you understanding CBVs is the &lt;a class="reference external" href="http://ccbv.co.uk/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; inspector&lt;/a&gt; which
has a nice web interface for browsing the &lt;span class="caps"&gt;CBV&lt;/span&gt; hierarchies, attributes and&amp;nbsp;methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quick-introduction-to-the-formview"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;A quick introduction to the &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A simple &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; can be defined like this (&lt;a class="reference external" href="http://ccbv.co.uk/projects/Django/1.6/django.views.generic.edit/FormView/"&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; FormView&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class MyFormView(FormView):
  form_class = forms.MyFormView
  template_name = 'my_template.html'
&lt;/pre&gt;
&lt;p&gt;The above can be used in urls.py like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
urlpatterns = patterns('',
  url(r'^my_formview/$', views.MyFormView.as_view() , name='my_formview' ),
&lt;/pre&gt;
&lt;p&gt;This will present a form to the user when he visits the &lt;tt class="docutils literal"&gt;my_formview&lt;/tt&gt;  url &amp;#8212; however this form won&amp;#8217;t do anything. To allow
the form to actually do something when it&amp;#8217;s been submitted we need to override the &lt;tt class="docutils literal"&gt;form_valid&lt;/tt&gt; method.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def form_valid(self, form):
    value = form.cleaned_data['value']
    messages.info(self.request, &amp;quot;MyForm submitted with value {0}!&amp;quot;.format(value) )
    return HttpResponseRedirect( reverse('my_formview') )
&lt;/pre&gt;
&lt;p&gt;As you can see the submitted form is passed in the method and can be used to receive its &lt;tt class="docutils literal"&gt;cleaned_data&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt;
has various other options for instance a &lt;tt class="docutils literal"&gt;form_invalid&lt;/tt&gt; method, an &lt;tt class="docutils literal"&gt;initial&lt;/tt&gt; attribute to set the initial values for the form&amp;nbsp;etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quick-introduction-to-the-singleobjectmixin"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;A quick introduction to the &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; adds a number of attributes &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; methods to a view that can be used for object manipulation. The
most important ones is the &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;queryset&lt;/tt&gt; attributes and the &lt;tt class="docutils literal"&gt;get_queryset&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;get_object()&lt;/tt&gt;. To use
the &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; in your &lt;span class="caps"&gt;CBV&lt;/span&gt; just add it to the list of the classes to inherit from and define either the
&lt;tt class="docutils literal"&gt;model&lt;/tt&gt; or the &lt;tt class="docutils literal"&gt;queryset&lt;/tt&gt; attribute. After that you may pass a &lt;tt class="docutils literal"&gt;pk&lt;/tt&gt; parameter to your view and you will get an
&lt;tt class="docutils literal"&gt;object&lt;/tt&gt; context variable in the template with the selected&amp;nbsp;object!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="being-generic-and-dry"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Being generic and &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can more or less now understand how we should use &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt; to generate our
generic &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; for acting on objects: Our &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; should &lt;em&gt;get&lt;/em&gt; the object using the &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;
and change it when the form is submitted using the values from the form. A first implementation would be the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class GenericObjectFormView1(FormView, SingleObjectMixin):

    def form_valid(self, form):
        obj = self.get_object()
        obj.change_status(form)
        return HttpResponseRedirect( obj.get_absolute_url() )
&lt;/pre&gt;
&lt;p&gt;So our &lt;tt class="docutils literal"&gt;GenericObjectFormView1&lt;/tt&gt; class inherits from &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;. The only thing that we have
to assure is that the Model we want to act on needs to implement a &lt;tt class="docutils literal"&gt;change_status&lt;/tt&gt; method which gets the &lt;tt class="docutils literal"&gt;form&lt;/tt&gt; and
changes the status of that object based on its value. For instance, two implementations can be the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class CancelObjectFormView(GenericObjectFormView1):
    template_name = 'cancel.html'
    form_class = forms.CancelForm
    model = models.Application

class SubmitObjectFormView(GenericObjectFormView1):
    template_name = 'submit.html'
    form_class = forms.SubmitForm
    model = models.Application
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="being-more-generic-and-dry"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Being more generic and &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous implementation has two&amp;nbsp;problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What happens if the status of the object should not be changed even if the form &lt;em&gt;is&lt;/em&gt;&amp;nbsp;valid?&lt;/li&gt;
&lt;li&gt;We shouldn&amp;#8217;t need to create a new template for every new &lt;tt class="docutils literal"&gt;GenericObjectFormView&lt;/tt&gt; since all these templates will just output the object information, ask a question for the status change and output the&amp;nbsp;form.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;#8217;s write a new version of our GenericObjectFormView that actually resolves&amp;nbsp;these:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class GenericObjectFormView2(FormView, SingleObjectMixin):
    template_name = 'generic_formview.html'
    ok_message = ''
    not_ok_message = ''
    title = ''
    question =''

    def form_valid(self, form):
        obj = self.get_object()
        r = obj.change_status(form)
        if r:
            messages.info(self.request, self.yes_message)
        else:
            messages.info(self.request, self.not_ok_message)
        return HttpResponseRedirect( obj.get_absolute_url() )

    def get_context_data(self, **kwargs):
        context = super(GenericYesNoFormView, self).get_context_data(**kwargs)
        context['title'] = self.title
        context['question'] = self.question
        return context
&lt;/pre&gt;
&lt;p&gt;The above adds an ok and not ok message which will be outputed if the status can or cannot be changed. To accomplish this,
the &lt;tt class="docutils literal"&gt;change_status&lt;/tt&gt; method should now return a boolean value to mark if the action was ok or not. Also, a generic template
will now be used. This template has two placeholders: One for the title of the page (&lt;tt class="docutils literal"&gt;title&lt;/tt&gt; attribute) and one for the
question asked to the user (&lt;tt class="docutils literal"&gt;question&lt;/tt&gt; attribute). Now we can use it like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class CancelObjectFormView(GenericObjectFormView2):
    form_class = forms.CancelForm
    model = models.Application
    ok_message = 'Cancel success!'
    not_ok_message = 'Not able to cancel!'
    title = 'Cancel an object'
    question = 'Do you want to cancel this object?'

class SubmitObjectFormView(GenericObjectFormView2):
    form_class = forms.SubmitForm
    model = models.Application
    ok_message = 'Submit  ok'
    not_ok_message = 'Cannot submit!'
    title = 'Submit an object'
    question ='Do you want to submit this object?'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="other-options"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Other&amp;nbsp;options&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;ve just got a glimpse of how we can use CBVs to increase the DRYness of our Django applications. There are various
extra things that we can add to our &lt;tt class="docutils literal"&gt;GenericObjectFormView2&lt;/tt&gt; as attributes which will be defined by inheriting
classes. Some ideas is to check if the current user actually has access to modify the object (hint: override the
&lt;tt class="docutils literal"&gt;get_object&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;SingleObjectMixin&lt;/tt&gt;) or render the form diffirently depending on the current user (hint:
override the &lt;tt class="docutils literal"&gt;get_form_kwargs&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;FormView&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Fri, 11 Apr 2014 10:23:00 +0300</pubDate><guid>tag:spapas.github.io,2014-04-11:2014/04/11/django-generic-formviews-for-objects/</guid><category>django</category><category>python</category><category>cbv</category><category>class-based-views</category></item><item><title>A WagtailÂ tutorial</title><link>http://spapas.github.io/2014/02/13/wagtail-tutorial/</link><description>&lt;p&gt;&lt;a href="http://wagtail.io"&gt;Wagtail&lt;/a&gt; is a new Open Source &lt;a href="https://www.djangoproject.com"&gt;Django&lt;/a&gt;-based &lt;span class="caps"&gt;CMS&lt;/span&gt;. In this 20 minute tutorial we will see how you can create a blog from scratch using Wagtail. If you want to see some more examples of usage please take a look at the &lt;a href="https://github.com/torchbox/wagtaildemo"&gt;wagtaildemo&lt;/a&gt; GitHub&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;To follow this tutorial you will need to have &lt;a href="http://python.org/"&gt;Python&lt;/a&gt; 2.7 installed with a working version of &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; and &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The result of this tutorial has been deployed to &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;: &lt;a href="http://gentle-refuge-2590.herokuapp.com/"&gt;http://gentle-refuge-2590.herokuapp.com/&lt;/a&gt; - you may visit the &lt;a href="http://gentle-refuge-2590.herokuapp.com/admin/"&gt;admin site&lt;/a&gt; and login with root / 123 to play with Wagtail! Please don&amp;#8217;t do anything naughty !!! Also, notice that &lt;a href="https://devcenter.heroku.com/articles/dynos#isolation-and-security"&gt;because of how Heroku works&lt;/a&gt; you won&amp;#8217;t be able to upload&amp;nbsp;anything.&lt;/p&gt;
&lt;h2&gt;Installing the wagtail&amp;nbsp;dependencies&lt;/h2&gt;
&lt;p&gt;It is recomended to create a new virtual environment that will host the wagtail tutorial. After you have changed to the virtual environment you will need to installl the Wagtail requirements. Create a file named &lt;code&gt;requirements.txt&lt;/code&gt; containing the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.6.2&lt;/span&gt;
&lt;span class="n"&gt;South&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.0.0&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compressor&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;1.4&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modelcluster&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/torchbox/wagtail.git#egg=wagtail&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;taggit&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.11.2&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;libsass&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run
&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.  If you use Microsoft Windows you &lt;em&gt;will&lt;/em&gt; experience problems with Pillow and lxml. Please download the 
installation executables from https://pypi.python.org/pypi/Pillow/2.3.0 and https://pypi.python.org/pypi/lxml/3.3.1, install 
them using &lt;code&gt;easy_install Pillow-2.3.0.x-py2.7.exe&lt;/code&gt; and &lt;code&gt;easy_install lxml-3.3.1.x-py2.7.exe&lt;/code&gt; (from inside your virtual environment) 
and then install the other requirements. Also please use the latest version of Wagtail (hosted on github) because it has some changes from 
the pypi (so &lt;em&gt;don&amp;#8217;t&lt;/em&gt; do a &lt;code&gt;pip install wagtail&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Unfortuanately, no official binaries for libsass (which is a django-libsass requirement) are (yet) available for Windows. I
have compiled a version for win32 and python 2.7 (which I use) using the &lt;a href="http://www.confusedbycode.com/articles/compiling-python-modules.html"&gt;instructions found here&lt;/a&gt;. You can download this version 
&lt;a href="http://spapas.github.io/images/libsass-0.3.0-cp27-none-win32.whl"&gt;as a wheel package&lt;/a&gt;. Notice that because libsass was compiled with &lt;span class="caps"&gt;VC&lt;/span&gt; Express 2013
you should also install the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=40784"&gt;Visual C++ 2013 redistributable&lt;/a&gt; package from&amp;nbsp;Microsoft.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please use it at your own risk&amp;nbsp;!!!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To install &lt;a href="http://pythonwheels.com/"&gt;wheels&lt;/a&gt; you have to use a version of pip &amp;gt;= 1.4 (so do an &lt;code&gt;easy_install -U pip&lt;/code&gt; from your
virtual environment if you have a previous version) and then you can just do a normal &lt;code&gt;pip install libsass-0.3.0-cp27-none-win32.whl&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning no2:&lt;/strong&gt; More unfortuanately, there seem to be &lt;a href="https://github.com/torchbox/wagtail/issues/133"&gt;a number of issues&lt;/a&gt; with how libsass handles &lt;code&gt;@import&lt;/code&gt; statements
in Windows. Until this is fixed, Windows users are recommened to use the command line (Ruby) sass compiler. To use it, please
install Ruby in your system and then install sass with &lt;code&gt;gem install sass -v "&amp;gt;=3.3.0alpha" --pre&lt;/code&gt;. After that, in the &lt;code&gt;COMPRESS_PRECOMPILERS&lt;/code&gt; 
setting of your &lt;code&gt;settings.py&lt;/code&gt; (discussed in the next section), change the line &lt;code&gt;('text/x-scss', 'django_libsass.SassCompiler'),&lt;/code&gt; to 
&lt;code&gt;('text/x-scss', 'sass --scss  {infile} {outfile}'),&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Creating and configuring your&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Wagtail has to &amp;#8220;live&amp;#8221; inside a normal Django project so you now may create a new Django project by&amp;nbsp;issuing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python &amp;lt;PATH_OF_YOUR_VIRTUAL_ENV&amp;gt;/scripts/django-admin.py startproject wagtailtutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you use Unix you can just run &lt;code&gt;django-admin.py&lt;/code&gt; etc however if you try to do the same in windows you
will find out that windows tries to run the .py file with the python executable that is assigned through
explorer (which of course is your main python installation) and &lt;em&gt;not&lt;/em&gt; through your path! That&amp;#8217;s why
all our commands will be in the form &lt;code&gt;python script.py&lt;/code&gt; to make sure that Windows picks the python
executable from your path (which, if you&amp;#8217;re inside the virtual enviroment will be the correct&amp;nbsp;one).&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;wagtailtutorial&lt;/code&gt; folder you will see a file named &lt;code&gt;manage.py&lt;/code&gt; and another folder named &lt;code&gt;wagtailtutorial&lt;/code&gt;. Inside this &lt;code&gt;wagtailtutorial&lt;/code&gt; folder you will find &lt;code&gt;settings.py&lt;/code&gt; and &lt;code&gt;urls.py&lt;/code&gt; which need to be&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;urls.py&lt;/code&gt;, remove everything and change it like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls.static&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RedirectView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailcore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtail_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailadmin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailadmin_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailimages&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailimages_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailembeds&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailembeds_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtaildocs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin_urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtaildocs_admin_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtaildocs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtaildocs_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailsnippets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailsnippets_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailsearch.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;frontend&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailsearch_frontend_urls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailsearch_admin_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailusers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailusers_urls&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailredirects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailredirects_urls&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autodiscover&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c"&gt;# Signal handlers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailsearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_signal_handlers&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;wagtailsearch_register_signal_handlers&lt;/span&gt;
&lt;span class="n"&gt;wagtailsearch_register_signal_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^django-admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;

    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailimages_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/embeds/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailembeds_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/documents/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtaildocs_admin_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/snippets/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailsnippets_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/search/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailsearch_admin_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/users/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailusers_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/redirects/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailredirects_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailadmin_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^search/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtailsearch_frontend_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^documents/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtaildocs_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;

    &lt;span class="c"&gt;# For anything not caught by a more specific rule above, hand over to&lt;/span&gt;
    &lt;span class="c"&gt;# Wagtail&amp;#39;s serving mechanism&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wagtail_urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.staticfiles.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;staticfiles_urlpatterns&lt;/span&gt;

    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;staticfiles_urlpatterns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# tell gunicorn where static files are in dev mode&lt;/span&gt;
    &lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;images/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can se that there is a signal handler when a searchable thing is added or changed to handle indexing for search, normal django admin is mapped under /django-admin since /admin is use for Wagtail (of course you may map Wagtail wherever you&amp;#8217;d like), inclusion of various wagtail related urls and finally a Wagtail handling everything else. Finally there are some handlers for media and static&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;After that please change your &lt;code&gt;settings.py&lt;/code&gt; like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Django settings for wagtailtutorial project.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;

&lt;span class="n"&gt;ADMINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;MANAGERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ADMINS&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/wagtailtutorial.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Set to empty string for localhost.&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c"&gt;# Set to empty string for default.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;CONN_MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;  &lt;span class="c"&gt;# number of seconds database connections should persist for&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Europe/London&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en-gb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;USE_I18N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;USE_L10N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;compressor.finders.CompressorFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wq21wtjo3@d_qfjvd-#td!&lt;/span&gt;&lt;span class="si"&gt;%7g&lt;/span&gt;&lt;span class="s"&gt;fy2updj2z+nev^k$iy%=m4_tr&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATE_LOADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.template.loaders.filesystem.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.template.loaders.app_directories.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailcore.middleware.SiteMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailredirects.middleware.RedirectMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;global_settings&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;global_settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.core.context_processors.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ROOT_URLCONF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wagtailtutorial.urls&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wagtailtutorial.wsgi.application&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# &amp;#39;django.contrib.sites&amp;#39;,  # Wagtail uses its own site management logic&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;taggit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;modelcluster&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailcore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailadmin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtaildocs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailsnippets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailusers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailimages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailembeds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailsearch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;wagtail.wagtailredirects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;&amp;#39;tutorial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;EMAIL_SUBJECT_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[wagtailtutorial] &amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;INTERNAL_IPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10.0.2.2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;COMPRESS_PRECOMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/x-scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django_libsass.SassCompiler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Auth settings&lt;/span&gt;
&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.auth.views.login&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LOGIN_REDIRECT_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wagtailadmin_home&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;LOGGING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;disable_existing_loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;require_debug_false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.utils.log.RequireDebugFalse&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;filters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;require_debug_false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.utils.log.AdminEmailHandler&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mail_admins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;# WAGTAIL SETTINGS&lt;/span&gt;
&lt;span class="n"&gt;WAGTAIL_SITE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wagtailtutorial&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Override the search results template for wagtailsearch&lt;/span&gt;
&lt;span class="n"&gt;WAGTAILSEARCH_RESULTS_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tutorial/search_results.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WAGTAILSEARCH_RESULTS_TEMPLATE_AJAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tutorial/includes/search_listing.html&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;WAGTAILSEARCH_ES_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wagtailtutorial&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The most important thing to notice is that  the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; contains the usual apps from django.*, &lt;a href="http://south.aeracode.org/"&gt;south&lt;/a&gt; for database migrations, &lt;a href="https://github.com/django-compressor/django-compressor"&gt;django-compressor&lt;/a&gt; to support compressing static files (and automatic translating from less to css), &lt;a href="https://github.com/alex/django-taggit"&gt;django-taggit&lt;/a&gt; to add support for tags, and &lt;a href="https://github.com/torchbox/django-modelcluster/"&gt;django-modelcluster&lt;/a&gt; which adds support from clusters (groups) of models. It also contains the wagtail.* applications and the tutorial application which is where we will create our blog. Also there are two Wagtail related middleware (one to add a site attribute to each request and one to hand redirects), configuring django-compressor to use &lt;code&gt;django_libsass&lt;/code&gt; to compile &lt;code&gt;less&lt;/code&gt; files, and some other, not so important Wagtail&amp;nbsp;settings.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s create the missing tutorial application by&amp;nbsp;issuing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py startapp tutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we&amp;#8217;ll have a &lt;code&gt;tutorial&lt;/code&gt; folder waiting to define our blog structure inside the &lt;code&gt;wagtailtutorial&lt;/code&gt; folder!&lt;/p&gt;
&lt;h2&gt;Checking to see if everything&amp;nbsp;works&lt;/h2&gt;
&lt;p&gt;Before continuing with our blog creation let&amp;#8217;s make sure that everything works, first of all by generating the database&amp;nbsp;schema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the superuser question answer yes and add a superuser. Then you can run the migrations - however because there are some problems with the way SQLite3 runs migrations it is recommended to run the migrations in two&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py migrate 0001 --all
python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you now may try&amp;nbsp;a&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and visit &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;. If everything worked fine you will get&amp;nbsp;a&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to your new Wagtail&amp;nbsp;site!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;page &amp;#8212; congratulations&amp;nbsp;!&lt;/p&gt;
&lt;p&gt;The homepage is rather simple (for now!) but you may already navigate to http://127.0.0.1:8000/admin and from there, login to Wagtail admin with the superuser you created earlier. 
Now you may start experiencing Wagtail&amp;nbsp;! &lt;/p&gt;
&lt;p&gt;&lt;img alt="Wagtail admin index" src="http://spapas.github.io/images/wagtail-index.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Exploring Wagtail&amp;nbsp;admin&lt;/h2&gt;
&lt;p&gt;When you login to Wagtail admin you will see a menu at the left with the&amp;nbsp;options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explorer is used to actually manage the content of your&amp;nbsp;site&lt;/li&gt;
&lt;li&gt;Search is used for searching through your&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Images is used to manage your&amp;nbsp;images&lt;/li&gt;
&lt;li&gt;Documents is used to manage your&amp;nbsp;Documents&lt;/li&gt;
&lt;li&gt;Snippets is used for side bars&amp;nbsp;etc&lt;/li&gt;
&lt;li&gt;Users is used for User&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;Redirects is used to redirect to a specific&amp;nbsp;page&lt;/li&gt;
&lt;li&gt;Editors picks is used to promote search&amp;nbsp;results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of the previous, the one needing more explanation is Explorer: Clicking it you will see that a label named &amp;#8220;Welcome to your Wagtail site!&amp;#8221; will open. This is the root Page of your site. If you click at it you will go to the actions of this page. The actions you can do here is:
 - Add Child Page
 - Edit
 - View Live
 - Move
 - Delete
 -&amp;nbsp;Unpublish&lt;/p&gt;
&lt;p&gt;The Pages (and more generally the Content) of Wagtail are Django Models that are saved through a Tree hierarchy. However, if you click &amp;#8220;Add Child Page&amp;#8221; you won&amp;#8217;t be able to add anything because you must create your own Page types (we will see how it is done in the next&amp;nbsp;section). &lt;/p&gt;
&lt;p&gt;When you click edit you will be able to edit the parts of the page (each part is a normal Field of the model). Also, you will see that the form is split into two tabs: Content and Promote. In the Content for instance you will see that the &amp;#8220;Welcome to your Wagtail site!&amp;#8221; has only a &amp;#8220;Title&amp;#8221; CharField. These are the fields that will be available to all Pages since &amp;#8220;Welcome to your Wagtail site!&amp;#8221; has a class of &lt;code&gt;Page&lt;/code&gt; from which every other page should inherit. After you finish editing a page you may save it as a draft, publish, sent it for moderation (if you don&amp;#8217;t have the rights to publish it)&amp;nbsp;etc.&lt;/p&gt;
&lt;h2&gt;Creating our&amp;nbsp;blog&lt;/h2&gt;
&lt;p&gt;Each of our Page types is a normal Django Model which inherits from &lt;code&gt;Page&lt;/code&gt;. Let&amp;#8217;s suppose that our posts should contain a title, a body and a created date. Add the following to &lt;code&gt;tutorials/models.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailcore.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailcore.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailadmin.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldPanel&lt;/span&gt;    

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Post date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blog Page&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;indexed_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;BlogPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run &lt;code&gt;python manage.py syncdb&lt;/code&gt; to create the &lt;code&gt;tutorial_blogpage&lt;/code&gt; table. &lt;/p&gt;
&lt;p&gt;Now, if you visit again the /admin and click on the &amp;#8220;Add Child Page&amp;#8221; action of &amp;#8220;Welcome to your new Wagtail Site!&amp;#8221; you will see the &amp;#8220;Blog Page&amp;#8221; page and after you click it you will be able to see a form with the Fields you defined &lt;em&gt;and&lt;/em&gt; title(title, body, date). The title is a field inherited from Page, along with the fields  in the Promote&amp;nbsp;tab. &lt;/p&gt;
&lt;p&gt;In our declaration of BlogPage we added three &lt;code&gt;FieldPanel&lt;/code&gt;s on its content_panes. A &lt;code&gt;FieldPanel&lt;/code&gt; is a special edit handler for each Field. That is why when you try to edit the body you will see a rich text toolbar that enables you to not only format text but also embed images, documents and even oembed links. If you hadn&amp;#8217;t included the &lt;code&gt;FieldPanel('body', classname="full")&lt;/code&gt; then you wouldn&amp;#8217;t see the rich text&amp;nbsp;editor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editing pages in Wagtail" src="http://spapas.github.io/images/wagtail-edit-page.png" /&gt;&lt;/p&gt;
&lt;p&gt;So now we can add as many posts as we&amp;nbsp;like! &lt;/p&gt;
&lt;p&gt;The time has come to take a look at our fine blog post: After we publish our page we click to the view live action&amp;nbsp;and&amp;#8230; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TemplateDoesNotExist at&amp;nbsp;/hello-world/&lt;/p&gt;
&lt;p&gt;tutorial/blog_page.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;:(&lt;/p&gt;
&lt;p&gt;A template seems to be missing &amp;#8212; actually we have totally forgotten about the presentation of our blog &amp;#8212; we&amp;#8217;ll talk about this in the next section&amp;nbsp;!&lt;/p&gt;
&lt;p&gt;However, before going there we should also create an Index page type collecting our&amp;nbsp;posts. &lt;/p&gt;
&lt;p&gt;For this, we will change our &lt;code&gt;models.py&lt;/code&gt; to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailcore.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Orderable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailcore.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.wagtailadmin.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldPanel&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MultiFieldPanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;InlinePanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PageChooserPanel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;modelcluster.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParentalKey&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Post date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;indexed_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blog Page&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;BlogPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;link_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;wagtailcore.Page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;PageChooserPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;link_page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RelatedLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkFields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Link title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;MultiFieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinkFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;panels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogIndexPageRelatedLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orderable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RelatedLink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParentalKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tutorial.BlogIndexPage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;related_links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogIndexPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;indexed_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Blog Index Page&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;BlogIndexPage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;intro&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;full&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;InlinePanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlogIndexPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;related_links&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Related links&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above adds a way to put &lt;code&gt;related_links&lt;/code&gt; to a &lt;code&gt;BlogIndexPage&lt;/code&gt; &amp;#8212; these related_links are the &lt;code&gt;BlogPage&lt;/code&gt;s that actually belong to the blog - so now, we can add a blog index page and add all our blog posts to&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;Now that we&amp;#8217;ve created the BlogPage and BlogIndexPage pages it&amp;#8217;s time to take a look at how we will actually display our&amp;nbsp;blog&amp;#8230;&lt;/p&gt;
&lt;h2&gt;Creating templates for &lt;em&gt;Page&lt;/em&gt;s&lt;/h2&gt;
&lt;p&gt;A normal Django template can be used to display each page type. Wagtail either generates automatically (by seperating underscors with capital letters in camelcase for instance BlogIndexPage -&amp;gt; blog_index_page) or you can use the template class attribute. Let&amp;#8217;s add a &lt;code&gt;templates&lt;/code&gt; foler within the &lt;code&gt;tutorial&lt;/code&gt; foler and add another folder named &lt;code&gt;tutorial&lt;/code&gt; inside &lt;code&gt;templates&lt;/code&gt; and ten add a file named &lt;code&gt;blog_index_page.html&lt;/code&gt; to &lt;code&gt;templates&lt;/code&gt; with the following content (you must have the following hierarchy &lt;code&gt;wagtailtutorial/tutorial/templates/tutorial/blog_index_page.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ self.title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        Intro: {{ self.intro }}
        &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        {% for rl in self.related_links.all %}
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ rl.title }}: &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{{ rl.link_page.url }}&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ rl.link_page }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {% endfor %}
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So self is the context name of the  BlogPageIndex instance that is used to render this page. Beyond that, it&amp;#8217;s normal&amp;nbsp;django.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rendering the Blog Index" src="http://spapas.github.io/images/wagtail-index-template.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now you can view your Blog Index &amp;#8212; however before clicking on a link to also view your posts add the template for your &lt;code&gt;BlogPost&lt;/code&gt; (&lt;code&gt;tutorial/blog_page.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% load rich_text %}
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ self.title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        Date: {{ self.date }}
        {{ self.body | richtext }}
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The extra thing here is the &lt;code&gt;richtext&lt;/code&gt; filter which renders a &lt;code&gt;RichTextField&lt;/code&gt; correctly. Of course the above templates are just examples - check &lt;code&gt;wagtaildemo&lt;/code&gt; for a much better template&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;Woo-hoo &amp;#8212; now I can totally start blogging !!!&amp;nbsp;\o/&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;But &amp;#8230; when I go to 127.0.0.1:8000 it displays the ugly &amp;#8220;Welcome to your new Wagtail site!&amp;#8221;. I don&amp;#8217;t want to see that any more&amp;nbsp;!!!&lt;/p&gt;
&lt;p&gt;No problemo - check the next section of the tutorial&amp;nbsp;:)&lt;/p&gt;
&lt;h2&gt;Changing your home&amp;nbsp;page&lt;/h2&gt;
&lt;p&gt;Wagtail uses the concept of &lt;em&gt;sites&lt;/em&gt; to define groups of pages hosted in the &lt;em&gt;same&lt;/em&gt; server. To make more clear what site is, you have to use the good old django admin which can be found at &lt;code&gt;http://127.0.0.1:8000/django-admin/&lt;/code&gt;. Check the localhost[default] site entry: You will see that each site has a name, a root page (currently the &amp;#8220;Welcome to your new Wagtail site!&amp;#8221;) and an is_default check. So,  change the root page of the localhost site to your BlogIndexPage and go to &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt; &amp;#8230; Yes ! The blog is alive&amp;nbsp;:)&lt;/p&gt;
&lt;h2&gt;Where to go from&amp;nbsp;here&lt;/h2&gt;
&lt;p&gt;You are now ready to start adding more pages to your blog, adding functionality to it (don&amp;#8217;t forget that everything is just Django models and templates so you can
change it at will), or even creating a completely different kind of site by adding other Page types. For a more complete site with lots of examples please check 
&lt;a href="https://github.com/torchbox/wagtaildemo"&gt;wagtaildemo&lt;/a&gt;. There is
no complete documentation yet however you&amp;nbsp;can &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the source&amp;nbsp;Luke!&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Thu, 13 Feb 2014 21:20:00 +0200</pubDate><guid>tag:spapas.github.io,2014-02-13:2014/02/13/wagtail-tutorial/</guid><category>wagtail</category><category>python</category><category>django</category></item><item><title>Django dynamicÂ forms</title><link>http://spapas.github.io/2013/12/24/django-dynamic-forms/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#describing-a-django-form-in-json" id="id2"&gt;Describing a django form in &lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-the-form-fields" id="id3"&gt;Creating the form&amp;nbsp;fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-the-actual-form" id="id4"&gt;Creating the actual&amp;nbsp;form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-the-dynamic-form" id="id5"&gt;Using the dynamic&amp;nbsp;form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To define a form in django, a developer has to create a class which extends
&lt;tt class="docutils literal"&gt;django.forms.Form&lt;/tt&gt;
and has  a number of attributes extending from &lt;tt class="docutils literal"&gt;django.forms.Field&lt;/tt&gt;. This makes
it very easy for the developer to create static forms, but creating
dynamic forms whose fields can be changed depending on the data contributed by the
users of the application is not so&amp;nbsp;obvious.&lt;/p&gt;
&lt;p&gt;Of course, some people may argue that they can do whatever
they want just by spitting html input tags to their templates, however this totally violates
&lt;span class="caps"&gt;DRY&lt;/span&gt; and any serious django developer would prefer to write &lt;a class="reference external" href="http://thedailywtf.com/Articles/A_Case_of_the_MUMPS.aspx"&gt;&lt;span class="caps"&gt;MUMPS&lt;/span&gt;&lt;/a&gt; than creating
html&amp;nbsp;dynamically.&lt;/p&gt;
&lt;p&gt;The implementation I will present here had been developed for an old project: In that
project there was a number of services which could be edited dynamically by the
moderators. For each service, the moderators would generate a questionnaire to
get input from the users which would be defined  using &lt;span class="caps"&gt;JSON&lt;/span&gt;. When the users needed
to submit information for each service, a dynamic django form would be generated
from this &lt;span class="caps"&gt;JSON&lt;/span&gt; and the answers would be saved to no-&lt;span class="caps"&gt;SQL&lt;/span&gt; database like&amp;nbsp;MongoDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="describing-a-django-form-in-json"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Describing a django form in &lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;span class="caps"&gt;JSON&lt;/span&gt; described django form is just an array of field &lt;span class="caps"&gt;JSON&lt;/span&gt; objects. Each field
object  has three required attributes: name which is the keyword of the field, label which is
how the label of the field and type which is the type of the input of that field. The
supported types are text, textarea, integer, radio, select, checkbox. Now, depending
on the type of the field, there could be also some more required attributes, for instace
text has a max_length attribute and select has a choices attribute (which is an array
of name/value objects). Also there are two optional attributes,
required with a default value of False and help_text with a default value of&amp;nbsp;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;As you can understand these map one by one to the corresponding attributes of the
actual django form fields. An example containing a complete &lt;span class="caps"&gt;JSON&lt;/span&gt; described form
is the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[
    {
        &amp;quot;name&amp;quot;: &amp;quot;firstname&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;First Name&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;,
        &amp;quot;max_length&amp;quot;: 25,
        &amp;quot;required&amp;quot;: 1
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;lastname&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Last Name&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;,
        &amp;quot;max_length&amp;quot;: 25,
        &amp;quot;required&amp;quot;: 1
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;smallcv&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Small CV&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;textarea&amp;quot;,
        &amp;quot;help_text&amp;quot;: &amp;quot;Please insert a small CV&amp;quot;
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;age&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Age&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
        &amp;quot;max_value&amp;quot;: 200,
        &amp;quot;min_value&amp;quot;: 0
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;marital_status&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Marital Status&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;radio&amp;quot;,
        &amp;quot;choices&amp;quot;: [
            {&amp;quot;name&amp;quot;: &amp;quot;Single&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;single&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Married&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;married&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Divorced&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;divorced&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Widower&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;widower&amp;quot;}
        ]
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;occupation&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Occupation&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;select&amp;quot;,
        &amp;quot;choices&amp;quot;: [
            {&amp;quot;name&amp;quot;: &amp;quot;Farmer&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;farmer&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Engineer&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;engineer&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Teacher&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;teacher&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Office Clerk&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;office_clerk&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Merchant&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;merchant&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Unemployed&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;unemployed&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Retired&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;retired&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Other&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;other&amp;quot;}
        ]
    },
    {
        &amp;quot;name&amp;quot;: &amp;quot;internet&amp;quot;,
        &amp;quot;label&amp;quot;: &amp;quot;Internet Access&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;checkbox&amp;quot;
    }
]
&lt;/pre&gt;
&lt;p&gt;The above &lt;span class="caps"&gt;JSON&lt;/span&gt; string can be easily converted to an array of dictionaries with the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import json
fields=json.loads(json_fields)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-form-fields"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Creating the form&amp;nbsp;fields&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most import part in the django dynamic form creation is to convert the above array
of field-describing dictionaries to actual objects of type &lt;tt class="docutils literal"&gt;django.forms.Field&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To help with that I implemented a class named &lt;tt class="docutils literal"&gt;FieldHandler&lt;/tt&gt; which gets an
array of field dictionaries and after initialization will have an attribute named &lt;tt class="docutils literal"&gt;formfields&lt;/tt&gt; which
will be a dictionary with keys the names of each field an values the corresponding &lt;tt class="docutils literal"&gt;django.forms.Field&lt;/tt&gt; objects. The implementation is as&amp;nbsp;follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import django.forms

class FieldHandler():
    formfields = {}
    def __init__(self, fields):
        for field in fields:
            options = self.get_options(field)
            f = getattr(self, &amp;quot;create_field_for_&amp;quot;+field['type'] )(field, options)
            self.formfields[field['name']] = f

    def get_options(self, field):
        options = {}
        options['label'] = field['label']
        options['help_text'] = field.get(&amp;quot;help_text&amp;quot;, None)
        options['required'] = bool(field.get(&amp;quot;required&amp;quot;, 0) )
        return options

    def create_field_for_text(self, field, options):
        options['max_length'] = int(field.get(&amp;quot;max_length&amp;quot;, &amp;quot;20&amp;quot;) )
        return django.forms.CharField(**options)

    def create_field_for_textarea(self, field, options):
        options['max_length'] = int(field.get(&amp;quot;max_value&amp;quot;, &amp;quot;9999&amp;quot;) )
        return django.forms.CharField(widget=django.forms.Textarea, **options)

    def create_field_for_integer(self, field, options):
        options['max_value'] = int(field.get(&amp;quot;max_value&amp;quot;, &amp;quot;999999999&amp;quot;) )
        options['min_value'] = int(field.get(&amp;quot;min_value&amp;quot;, &amp;quot;-999999999&amp;quot;) )
        return django.forms.IntegerField(**options)

    def create_field_for_radio(self, field, options):
        options['choices'] = [ (c['value'], c['name'] ) for c in field['choices'] ]
        return django.forms.ChoiceField(widget=django.forms.RadioSelect,   **options)

    def create_field_for_select(self, field, options):
        options['choices']  = [ (c['value'], c['name'] ) for c in field['choices'] ]
        return django.forms.ChoiceField(  **options)

    def create_field_for_checkbox(self, field, options):
        return django.forms.BooleanField(widget=django.forms.CheckboxInput, **options)
&lt;/pre&gt;
&lt;p&gt;As can be seen, in the &lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; method, the &lt;tt class="docutils literal"&gt;get_options&lt;/tt&gt; method is called first which
returns a dictionary with the common options (label, help_text, required). After that,
depending on the type of each field the correct method will be generated with
&lt;tt class="docutils literal"&gt;getattr(self, &lt;span class="pre"&gt;&amp;quot;create_field_for_&amp;quot;+field['type']&lt;/span&gt; )&lt;/tt&gt; (so if type is text this
will return a reference to the create_field_for_text method) and then called passing
the field dictinary and the options returned from &lt;tt class="docutils literal"&gt;get_options&lt;/tt&gt;. Each one of
the &lt;tt class="docutils literal"&gt;create_field_for_xxx&lt;/tt&gt; methods will extract the required (or optional)
attributes for the specific field type, update options and initialize the correct Field passing
the options as kwargs. Finally the formfields attribute will be updated with the name
and Field&amp;nbsp;object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-actual-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Creating the actual&amp;nbsp;form&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To create the actual dynamic &lt;tt class="docutils literal"&gt;django.forms.Form&lt;/tt&gt; I used the function &lt;tt class="docutils literal"&gt;get_form&lt;/tt&gt;
which receives a string with the json description, parses it to a python array,
creates the array of fields with the help of &lt;tt class="docutils literal"&gt;FieldHandler&lt;/tt&gt; and then generates
the &lt;tt class="docutils literal"&gt;Form&lt;/tt&gt; class with &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; passing it &lt;tt class="docutils literal"&gt;django.forms.Form&lt;/tt&gt; as a parent
and the array of &lt;tt class="docutils literal"&gt;django.forms.Field&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;FieldHandler&lt;/tt&gt; as&amp;nbsp;attributes:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_form(jstr):
    fields=json.loads(jstr)
    fh = FieldHandler(fields)
    return type('DynaForm', (django.forms.Form,), fh.formfields )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="using-the-dynamic-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Using the dynamic&amp;nbsp;form&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The result of &lt;tt class="docutils literal"&gt;get_form&lt;/tt&gt; can be used as a normal form class. As an&amp;nbsp;example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import dynaform

def dform(request):
    json_form = get_json_form_from_somewhere()
    form_class = dynaform.get_form(json_form)
    data = {}
    if request.method == 'POST':
        form = form_class(request.POST)
        if form.is_valid():
            data = form.cleaned_data
    else:
        form = form_class()

    return render_to_response( &amp;quot;dform.html&amp;quot;, {
        'form': form,  'data': data,
    }, RequestContext(request) )
&lt;/pre&gt;
&lt;p&gt;So, we have to get our &lt;span class="caps"&gt;JSON&lt;/span&gt; form description from somewhere (for instance
a field in a model) and then generate the form class with &lt;tt class="docutils literal"&gt;get_form&lt;/tt&gt;.
After that we follow the normal procedure of checking if the &lt;tt class="docutils literal"&gt;request.method&lt;/tt&gt;
is &lt;span class="caps"&gt;POST&lt;/span&gt; so we pass the &lt;span class="caps"&gt;POST&lt;/span&gt; data to the form and check if it is value or
we just create an empty form. As a result we just pass the data that was
read from the form to the view for&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Tue, 24 Dec 2013 14:20:00 +0200</pubDate><guid>tag:spapas.github.io,2013-12-24:2013/12/24/django-dynamic-forms/</guid><category>django</category><category>python</category><category>forms</category></item><item><title>Django authorityÂ data</title><link>http://spapas.github.io/2013/11/05/django-authoritiy-data/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#defining-authorities" id="id2"&gt;Defining authorities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#using-groups" id="id3"&gt;Using&amp;nbsp;groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#by-storing-the-authority-to-the-session" id="id4"&gt;By storing the authority to the&amp;nbsp;session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#by-using-a-custom-user-profile" id="id5"&gt;By using a Custom User&amp;nbsp;Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#getting-the-authority-of-the-user-has-to-be-dry" id="id6"&gt;Getting the authority of the user has to be &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#adding-authority-data" id="id7"&gt;Adding authority&amp;nbsp;data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id8"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One common requirement in an organization is to separate users in authorities (meaning departments / units / branches etc)
and each authority have its own data. So users belonging to the &amp;quot;Athens Branch&amp;quot; won&amp;#8217;t be able to
edit data submitted from users of the &amp;quot;Thessaloniki&amp;nbsp;Branch&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is a special case of the more general row-level-security in which each instance of a domain object will
have an &lt;span class="caps"&gt;ACL&lt;/span&gt;. Row-level-security would need a many-to-many relation between object instances and authorities, something
that would be overkill in our&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;Authority data is also a more general case of the user-data meaning that each user can have access
to data that he inserts in the system. Implementing user-data is easy using the techniques we will present&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;We have to notice that the django permissions do not support our requirements since they define security for all instances of a&amp;nbsp;model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-authorities"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Defining&amp;nbsp;authorities&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to have custom authorities I propose first of all to add an Authority model that would define the authority. Even if
your authorities only have a name I believe that adding the Authority model would be beneficial.
Now, there are many ways to separate normal django users (&lt;tt class="docutils literal"&gt;django.contrib.auth.models.User&lt;/tt&gt;) to&amp;nbsp;authorities:&lt;/p&gt;
&lt;div class="section" id="using-groups"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Using&amp;nbsp;groups&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just define a &lt;tt class="docutils literal"&gt;django.contrib.auth.models.Group&lt;/tt&gt; for each authority and add the users to the groups you want using the django-admin.
Your Authority model would have an one-to-one relation with the &lt;tt class="docutils literal"&gt;django.contrib.auth.models.Group&lt;/tt&gt; so you will be able to find out the other
information of the authority (since django groups only have&amp;nbsp;names).&lt;/p&gt;
&lt;p&gt;Now you can just get the groups for the user and find out his authorities. This could lead to problems when users belong to django groups
that are not related to authorities so you must filter these out (for instance by checking which groups actually have a corresponding&amp;nbsp;Authority).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="by-storing-the-authority-to-the-session"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;By storing the authority to the&amp;nbsp;session&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When the user logs in you can add an attribute to the session that would save the authority of the user. To do that, you should define
a custom middleware that checks to see if there is an authority attribute to the session and if not it will do whatever it needs to find it and set it.
An example is&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class CustomAuthorityMiddleware:
  def process_request(self, request):
    if not request.session.get('authority'):
      authority = get_the_authority(request.user)
      request.session['authority']=authority
&lt;/pre&gt;
&lt;p&gt;This way, whenever you want to find out the authority of the user you just check the&amp;nbsp;session.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="by-using-a-custom-user-profile"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;By using a Custom User&amp;nbsp;Profile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Just create a &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-the-existing-user-model"&gt;django user profile&lt;/a&gt; and add to it a &lt;tt class="docutils literal"&gt;ForeignKey&lt;/tt&gt; to your Authority&amp;nbsp;model:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Profile(models.Model):
  user = models.OneToOneField('django.auth.User')
  authority = models.ForeignKey('authorities.Authority', blank=True, null=True )

class Authority(models.Model):
  id = models.IntegerField(primary_key = True)
  name = models.CharField(max_length=64, )
  auth_type = models.CharField(max_length=16, )
&lt;/pre&gt;
&lt;p&gt;You can get the authority of the user through &lt;tt class="docutils literal"&gt;request.user.profile.authority&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-the-authority-of-the-user-has-to-be-dry"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Getting the authority of the user has to be &lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whatever method you use to define the authorities of your users you have to remember that it is very
important to define somewhere a function that will return the authority (or authorities) of a
user. You need to define a function even in the simple case in which your function would just return &lt;tt class="docutils literal"&gt;request.user.profile.authority&lt;/tt&gt;.
This will greatly help you when you wish to add some logic to this, for instance &amp;quot;quickly disable users belonging to Authority X
or temporary move users from Authority Y to authority&amp;nbsp;Z&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let us suppose that you have defined a &lt;tt class="docutils literal"&gt;get_user_authority&lt;/tt&gt; function. Also, you need to define a &lt;tt class="docutils literal"&gt;has_access&lt;/tt&gt; function
that would decide if a users/request has access to a particular object. This also needs to be &lt;span class="caps"&gt;DRY&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-authority-data"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Adding authority&amp;nbsp;data&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To define authority data you have to add a field to your model that would define its authority, for instance like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class AuthorityData(models.Model):
  authority = models.ForeignKey('authorities.Authority', editable=False,)
&lt;/pre&gt;
&lt;p&gt;This field should not be editable (at least by your end users) because they shouldn&amp;#8217;t be able to change the authority of the data they&amp;nbsp;insert.&lt;/p&gt;
&lt;p&gt;If you want to have user-data then just add a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;models.ForeignKey('django.auth.User',&lt;/span&gt; editable=False)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Now, your Create and Update Class Based Views have to pass the request to your forms and also your Detail and Update &lt;span class="caps"&gt;CBV&lt;/span&gt; should allow only getting
objects that belong to the authority of the&amp;nbsp;user:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class AuthorityDataCreateView(CreateView):
  model=models.AuthorityData

  def get_form_kwargs(self):
      kwargs = super(AuthorityDataCreateView, self).get_form_kwargs()
      kwargs.update({'request': self.request})
      return kwargs

class AuthorityDataDetailView(DetailView):
  def get_object(self, queryset=None):
      obj = super(AuthorityDataDetailView, self).get_object(queryset)
      if if not user_has_access(obj, self.request):
          raise Http404(u&amp;quot;Access Denied&amp;quot;)
      return obj

class AuthorityDataUpdateView(UpdateView):
  model=models.AuthorityData

  def get_form_kwargs(self):
      kwargs = super(AuthorityDataUpdateView, self).get_form_kwargs()
      kwargs.update({'request': self.request})
      return kwargs

  def get_object(self, queryset=None):
      obj = super(AuthorityDataUpdateView, self).get_object(queryset)
      if if not user_has_access(obj, self.request):
          raise Http404(u&amp;quot;Access Denied&amp;quot;)
      return obj
&lt;/pre&gt;
&lt;p&gt;Your ModelForm can now use the request to get the Authority and set it (don&amp;#8217;t forget
that you should not use &lt;tt class="docutils literal"&gt;Meta.exclude&lt;/tt&gt; but instead use &lt;tt class="docutils literal"&gt;Meta.include&lt;/tt&gt;!):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class AuthorityDataModelForm(forms.ModelForm):
    class Meta:
      model = models.AuthorityData
      exclude = ('authority',)

    def __init__(self, *args, **kwargs):
      self.request = kwargs.pop('request', None)
      super(ActionModelForm, self).__init__(*args, **kwargs)


    def save(self, force_insert=False, force_update=False, commit=True):
      obj = super(AuthorityDataModelForm, self).save(commit=False)
      if obj:
          obj.authority = get_user_authority(self.request)
          obj.save()
      return obj
&lt;/pre&gt;
&lt;p&gt;The previous work fine for Create/Detail/Update CBVs but not for ListsViews. List views querysets
and in general all queries to the object have to be filtered through&amp;nbsp;authority.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class AuthorityDataListView(ListView):
  def get_queryset(self):
    queryset = super(AuthorityDataModelForm, self).get_queryset()
    return queryset.filter(authority = get_user_authority(request))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the above techniques we can define authority (or just user) data. Your AuthorityData should
have a &lt;tt class="docutils literal"&gt;ForeignKey&lt;/tt&gt; to your Authority  and you have configure your queries, ModelForms and CBVs
to use that. If you have more than one models that belong to an authority and want to stay &lt;span class="caps"&gt;DRY&lt;/span&gt; then you&amp;#8217;d need
to define all the above as &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/class-based-views/mixins/"&gt;mixins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Tue, 05 Nov 2013 14:20:00 +0200</pubDate><guid>tag:spapas.github.io,2013-11-05:2013/11/05/django-authoritiy-data/</guid><category>django</category><category>python</category><category>security</category></item><item><title>Using custom authorities with spring-security LDAPÂ authentication</title><link>http://spapas.github.io/2013/10/14/spring-ldap-custom-authorities/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id3"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#a-basic-spring-security-setup" id="id4"&gt;A basic spring security&amp;nbsp;setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#spring-security-ldap-with-custom-authorities" id="id5"&gt;Spring security &lt;span class="caps"&gt;LDAP&lt;/span&gt; with custom authorities&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#contextsource" id="id6"&gt;contextSource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#usersearch" id="id7"&gt;userSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ldapauthprovider" id="id8"&gt;ldapAuthProvider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#customldapauthoritiespopulator" id="id9"&gt;CustomLdapAuthoritiesPopulator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#example" id="id10"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="id11"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One very useful component of the &lt;a class="reference external" href="http://spring.io/"&gt;spring&lt;/a&gt; java framework is &lt;a class="reference external" href="http://projects.spring.io/spring-security/"&gt;spring-security&lt;/a&gt; since it allows consistent usage of various security providers for
authentication and authorization. Although I&amp;#8217;ve found a great number of basic spring-security tutorials on the internet, I wasn&amp;#8217;t able to find a complete solution for my own&amp;nbsp;requirements:&lt;/p&gt;
&lt;p&gt;Logging in with &lt;span class="caps"&gt;LDAP&lt;/span&gt; but configuring the authorities &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[*]&lt;/a&gt; of the logged in user with the help of a custom method and not through &lt;span class="caps"&gt;LDAP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I think that the above is a common requirement in many organizations: There is a central &lt;span class="caps"&gt;LDAP&lt;/span&gt; repository in which the usernames and passwords of the users are stored, but the groups of the users are not stored there. Or maybe the groups that are actually stored in the &lt;span class="caps"&gt;LDAP&lt;/span&gt; cannot be transformed easily to application specific groups for each&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;You may find the working spring project that uses ldap and a custom groups populator here: &lt;a class="reference external" href="https://github.com/spapas/SpringLdapCustomAuthorities/"&gt;https://github.com/spapas/SpringLdapCustomAuthorities/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-basic-spring-security-setup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;A basic spring security&amp;nbsp;setup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve created a very basic setup for spring-security for a spring-mvc project. Please take a look here for a more thorough explanation of a simple spring-security project &lt;a class="reference external" href="http://www.mkyong.com/spring-security/spring-security-hello-world-example/"&gt;http://www.mkyong.com/spring-security/spring-security-hello-world-example/&lt;/a&gt; and here &lt;a class="reference external" href="http://www.codeproject.com/Articles/253901/Getting-Started-Spring-Security"&gt;http://www.codeproject.com/Articles/253901/Getting-Started-Spring-Security&lt;/a&gt; for a great explanation of the various spring-security&amp;nbsp;classes.&lt;/p&gt;
&lt;p&gt;In my setup there is a controller that defines two mappings, the &amp;quot;/&amp;quot; which is the homepage that has a link to the &amp;quot;/enter&amp;quot; and the &amp;quot;/enter&amp;quot; which is an internal page in which only authorized users have access. When the user clicks on &amp;quot;enter&amp;quot; he will be represented with a login form first. If the use logs in successfully, the enter.jsp will list the username and the authorities of the logged in user through the following spring-security&amp;nbsp;tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;&amp;lt;%@&lt;/span&gt; &lt;span class="n"&gt;taglib&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sec&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/security/tags&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;%&amp;gt;&lt;/span&gt;
[...]
Username: &lt;span class="nt"&gt;&amp;lt;sec:authentication&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;principal.username&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Authorities: &lt;span class="nt"&gt;&amp;lt;sec:authentication&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;principal.authorities&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The authentication provider is an in memory service in which the username, password and authorities of each user are defined in the &lt;span class="caps"&gt;XML&lt;/span&gt;. So this is a simple spring-security example that can be found in a number of places on the internet. The security rules, login form and the authentication provider are configured with the following &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;security-config.xml&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;beans:beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/security&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:beans=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/security&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/security/spring-security-3.1.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;http&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/**&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;security=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;http&lt;/span&gt; &lt;span class="na"&gt;use-expressions=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permitAll&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/enter&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hasRole(&amp;#39;user&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/**&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;denyAll&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;form-login&lt;/span&gt; &lt;span class="na"&gt;default-target-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;logout&lt;/span&gt;  &lt;span class="na"&gt;logout-success-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/http&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;authentication-provider&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;user-service&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;user&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spapas&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;authorities=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admin, user, nonldap&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;user&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;serafeim&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;authorities=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/user-service&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/authentication-provider&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/authentication-manager&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/beans:beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run this application and go to the /enter, we will get the following&amp;nbsp;output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Username:&amp;nbsp;spapas&lt;/p&gt;
&lt;p&gt;Authorities: [admin, nonldap,&amp;nbsp;user]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="spring-security-ldap-with-custom-authorities"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Spring security &lt;span class="caps"&gt;LDAP&lt;/span&gt; with custom&amp;nbsp;authorities&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous application can be modified to login through &lt;span class="caps"&gt;LDAP&lt;/span&gt; and get the authorities from a custom class. The main differences are in the &lt;tt class="docutils literal"&gt;pom.xml&lt;/tt&gt; which adsd the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;spring-security-ldap&lt;/span&gt;&lt;/tt&gt; dependency, the addition of a &lt;tt class="docutils literal"&gt;CustomLdapAuthoritiesPopulator.java&lt;/tt&gt; which does the actual mapping of username to authority and various changes to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;security-config.xml&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;As you will see we had to define our security beans mainly using spring beans and not using the various elements from security namespace like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;ldap-server&amp;gt;&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;ldap-authentication-provder&amp;gt;&lt;/span&gt;&lt;/tt&gt;. For a good tutorial on using these elements and ldap in spring security in general check these out: &lt;a class="reference external" href="http://docs.spring.io/spring-security/site/docs/3.1.x/reference/ldap.html"&gt;http://docs.spring.io/spring-security/site/docs/3.1.x/reference/ldap.html&lt;/a&gt; and &lt;a class="reference external" href="http://krams915.blogspot.gr/2011/01/spring-security-mvc-using-ldap.html"&gt;http://krams915.blogspot.gr/2011/01/spring-security-mvc-using-ldap.html&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;beans:beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/security&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:beans=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/security&lt;/span&gt;
&lt;span class="s"&gt;                   http://www.springframework.org/schema/security/spring-security-3.1.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;http&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/**&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;security=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;http&lt;/span&gt; &lt;span class="na"&gt;use-expressions=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;permitAll&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/enter&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hasRole(&amp;#39;user&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;intercept-url&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/**&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;access=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;denyAll&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;form-login&lt;/span&gt; &lt;span class="na"&gt;default-target-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;logout&lt;/span&gt;  &lt;span class="na"&gt;logout-success-url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/http&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;beans:bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contextSource&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.springframework.security.ldap.DefaultSpringSecurityContextSource&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ldap://login.serafeim.gr:389/dc=serafeim,dc=gr&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymousReadOnly&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/beans:bean&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;beans:bean&lt;/span&gt;
         &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userSearch&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.springframework.security.ldap.search.FilterBasedLdapUserSearch&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&lt;/span&gt; &lt;span class="na"&gt;index=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&lt;/span&gt; &lt;span class="na"&gt;index=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(uid={0})&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&lt;/span&gt; &lt;span class="na"&gt;index=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contextSource&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/beans:bean&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;beans:bean&lt;/span&gt;
         &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ldapAuthProvider&amp;quot;&lt;/span&gt;
         &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.springframework.security.ldap.authentication.LdapAuthenticationProvider&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;beans:bean&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.springframework.security.ldap.authentication.BindAuthenticator&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;contextSource&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;beans:property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userSearch&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userSearch&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class="c"&gt;         &amp;lt;beans:property name=&amp;quot;userDnPatterns&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;           &amp;lt;beans:list&amp;gt;&amp;lt;beans:value&amp;gt;uid={0},ou=People&amp;lt;/beans:value&amp;gt;&amp;lt;/beans:list&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;         &amp;lt;/beans:property&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;         --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/beans:bean&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/beans:constructor-arg&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;beans:constructor-arg&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;beans:bean&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gr.serafeim.springldapcustom.CustomLdapAuthoritiesPopulator&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/beans:constructor-arg&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/beans:bean&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;authentication-provider&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ldapAuthProvider&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/authentication-manager&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/beans:beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, in the above configuration we&amp;#8217;ve defined three spring beans: &lt;tt class="docutils literal"&gt;contextSource&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;userSearch&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ldapAuthProvider&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;&lt;/tt&gt; element uses the &lt;tt class="docutils literal"&gt;ldapAuthProvider&lt;/tt&gt; as an authentication provider. Below we will explain these&amp;nbsp;beans:&lt;/p&gt;
&lt;div class="section" id="contextsource"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;contextSource&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The contextSource bean defines the actual &lt;span class="caps"&gt;LDAP&lt;/span&gt; server that we are going to connect to. It has the class &lt;tt class="docutils literal"&gt;o.s.s.ldap.DefaultSpringSecurityContextSource&lt;/tt&gt;. This will need to be passed to other beans that would need to connect to the server for a number of operations. We pass to it the url of our &lt;span class="caps"&gt;LDAP&lt;/span&gt; server and set its &lt;tt class="docutils literal"&gt;anonymousReadOnly&lt;/tt&gt; property to true. The &lt;tt class="docutils literal"&gt;anonymousReadOnly&lt;/tt&gt; defines if we can anonymously connect to our &lt;span class="caps"&gt;LDAP&lt;/span&gt; server in order to perform the search operation below. If we cannot connect anonymously then we have to set its &lt;tt class="docutils literal"&gt;userDn&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;password&lt;/tt&gt; properties.&lt;/p&gt;
&lt;p&gt;A very interesting question is if the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;ldap-server&amp;gt;&lt;/span&gt;&lt;/tt&gt; element of the spring security namespace is related to &lt;tt class="docutils literal"&gt;the o.s.s.ldap.DefaultSpringSecurityContextSource&lt;/tt&gt; like our &lt;tt class="docutils literal"&gt;contextSource&lt;/tt&gt;. To find out, we need to check the &lt;tt class="docutils literal"&gt;o.s.s.config.SecurityNamespaceHandler&lt;/tt&gt; class of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;spring-security-config.jar&lt;/span&gt;&lt;/tt&gt;. In there we see the &lt;tt class="docutils literal"&gt;loadParsers&lt;/tt&gt; method which has the line: &lt;tt class="docutils literal"&gt;parsers.put(Elements.LDAP_SERVER, new &lt;span class="pre"&gt;LdapServerBeanDefinitionParser());&lt;/span&gt;&lt;/tt&gt;. The constant &lt;tt class="docutils literal"&gt;o.s.s.config.Elements.LDAP_SERVER&lt;/tt&gt; has the value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;ldap-server&amp;quot;&lt;/span&gt;&lt;/tt&gt; as expected, so we need to see what does the class &lt;tt class="docutils literal"&gt;o.s.s.config.ldap.LdapServerBeanDefinitionParser&lt;/tt&gt; do. This class has a parse() method that receives the xml that was used to instantiate the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;ldap-server&amp;gt;&lt;/span&gt;&lt;/tt&gt; element and, depending an on the actualy configuration, instantiates a bean of the class &lt;tt class="docutils literal"&gt;o.s.s.ldap.DefaultSpringSecurityContextSource&lt;/tt&gt; with an id of &lt;tt class="docutils literal"&gt;o.s.s.securityContextSource&lt;/tt&gt; that will be used by the other elements in the security namespace&amp;nbsp;!&lt;/p&gt;
&lt;p&gt;This actually solves another question I had concerning the following&amp;nbsp;error:&lt;/p&gt;
&lt;blockquote&gt;
No bean named &amp;#8216;org.springframework.security.authenticationManager&amp;#8217; is defined: Did you forget to add a gobal &amp;lt;authentication-manager&amp;gt; element to your configuration (with child &amp;lt;authentication-provider&amp;gt;  elements)? Alternatively you can use the authentication-manager-ref attribute on your &amp;lt;http&amp;gt; and &amp;lt;global-method-security&amp;gt; elements.&lt;/blockquote&gt;
&lt;p&gt;What happens is that when spring-security-configuration encounters an &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;&lt;/tt&gt; it will instantiate a bean named &lt;tt class="docutils literal"&gt;o.s.s.authenticationManager&lt;/tt&gt;  having the class
&lt;tt class="docutils literal"&gt;o.s.s.authentication.ProviderManager&lt;/tt&gt; and will create and pass to it a &lt;tt class="docutils literal"&gt;providers&lt;/tt&gt; list with all the authentication providers that are defined inside the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;&lt;/tt&gt; element with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;authentication-provider&amp;gt;&lt;/span&gt;&lt;/tt&gt; nodes. So, if you encounter the above error, the problem is that for some reason your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;authentication-manager&amp;gt;&lt;/span&gt;&lt;/tt&gt; is not configured correctly, so no &lt;tt class="docutils literal"&gt;o.s.s.authenticatioManager&lt;/tt&gt; bean is&amp;nbsp;created!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usersearch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;userSearch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;userSearch&lt;/tt&gt; bean is needed if we don&amp;#8217;t know exactly where our users are stored in the &lt;span class="caps"&gt;LDAP&lt;/span&gt; directory so we will use this bean as a search filter. If we do know our user tree then we won&amp;#8217;t need this bean at all as will be explained later. It has the class &lt;tt class="docutils literal"&gt;o.s.s.ldap.search.FilterBasedLdapUserSearch&lt;/tt&gt; and gets three constructor parameters: &lt;tt class="docutils literal"&gt;searchBase&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;searchFilter&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;contextSource&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;searchBase&lt;/tt&gt; is from where in the &lt;span class="caps"&gt;LDAP&lt;/span&gt; tree to start searching (empty in our case), the &lt;tt class="docutils literal"&gt;searchFilter&lt;/tt&gt; defines where is the username (uid in our case) and the &lt;tt class="docutils literal"&gt;contextSource&lt;/tt&gt; has been defined&amp;nbsp;before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ldapauthprovider"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;ldapAuthProvider&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the actual &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;authentication-provider&lt;/span&gt;&lt;/tt&gt; that the spring-security &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;authentication-manager&lt;/span&gt;&lt;/tt&gt; is going to use. It is an instance of class &lt;tt class="docutils literal"&gt;o.s.s.ldap.authentication.LdapAuthenticationProvider&lt;/tt&gt; which has two main properties: An &lt;tt class="docutils literal"&gt;o.s.s.ldap.authentication.LdapAuthenticator&lt;/tt&gt; implementation and an &lt;tt class="docutils literal"&gt;o.s.s.ldap.userdetails.LdapAuthoritiesPopulator&lt;/tt&gt; implementation. The first interface defines an &lt;tt class="docutils literal"&gt;authenticate&lt;/tt&gt; method and is used to actually authenticate the user with the &lt;span class="caps"&gt;LDAP&lt;/span&gt; server. The second interface defines a &lt;tt class="docutils literal"&gt;getGrantedAuthorities&lt;/tt&gt; which returns the roles for the authenticated user. The LdapAuthoritiesPopulator parameter is actually optional (so we can use &lt;span class="caps"&gt;LDAP&lt;/span&gt; to authenticate only the users) and we can provide our own implementation to have custom authorities for our application. That is exactly what we&amp;#8217;ve done&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;The two arguments used to initialize the ldapAuthProvoder are one instance of &lt;tt class="docutils literal"&gt;o.s.s.ldap.authentication.BindAuthenticator&lt;/tt&gt; which is a simple authenticator that tries to bind with the given credentials to the &lt;span class="caps"&gt;LDAP&lt;/span&gt; server to check the credentials and one instance of a custom class named &lt;tt class="docutils literal"&gt;g.s.s.CustomLdapAuthoritiesPopulator&lt;/tt&gt; which is the actual implementation of the custom roles provider. The &lt;tt class="docutils literal"&gt;BindAuthenticator&lt;/tt&gt; gets the &lt;tt class="docutils literal"&gt;contextSource&lt;/tt&gt; as a constructor parameter and its &lt;tt class="docutils literal"&gt;userSearch&lt;/tt&gt; property is set with the &lt;tt class="docutils literal"&gt;userSearch&lt;/tt&gt; bean defined previously. If we instead knew the actual place of the users, we could use the commented out &lt;tt class="docutils literal"&gt;userDnPatterns&lt;/tt&gt; property which takes a list of possible places in the &lt;span class="caps"&gt;LDAP&lt;/span&gt; catalog which will be checked for the&amp;nbsp;username.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customldapauthoritiespopulator"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;CustomLdapAuthoritiesPopulator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;CustomLdapAuthoritiesPopulator&lt;/tt&gt; just needs to implement the &lt;tt class="docutils literal"&gt;LdapAuthoritiesPopulator&lt;/tt&gt; interface. Here&amp;#8217;s our&amp;nbsp;implmentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;gr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;serafeim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springldapcustom&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Collection&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.HashSet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.ldap.core.DirContextOperations&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.security.core.GrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.security.core.authority.SimpleGrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomLdapAuthoritiesPopulator&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;LdapAuthoritiesPopulator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="nd"&gt;@Override&lt;/span&gt;
       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getGrantedAuthorities&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                       &lt;span class="n"&gt;DirContextOperations&lt;/span&gt; &lt;span class="n"&gt;userData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;spapas&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                       &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SimpleGrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
               &lt;span class="o"&gt;}&lt;/span&gt;
               &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SimpleGrantedAuthority&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;getGrantedAuthorities&lt;/tt&gt; just checks the username and add another role if it is a specific one. Of course here we would autowire our user roles repository and query the database to get the roles of the user, however I&amp;#8217;m not going to do that for the case of&amp;nbsp;simplicity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we run this application and go to the /enter, after logging in with our &lt;span class="caps"&gt;LDAP&lt;/span&gt; credentials as spapas, we will get the following&amp;nbsp;output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Username:&amp;nbsp;spapas&lt;/p&gt;
&lt;p&gt;Authorities: [admin,&amp;nbsp;user]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the previous a complete example of configuring a custom authorities populator was represented. Using this configuration we can login through the &lt;span class="caps"&gt;LDAP&lt;/span&gt; server of our organization but use application specific roles for our logged-in&amp;nbsp;users.&lt;/p&gt;
&lt;!-- font-size: 0.5em;
vertical-align: top; --&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Which is how spring calls the groups/roles the user belongs to&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Mon, 14 Oct 2013 08:55:00 +0300</pubDate><guid>tag:spapas.github.io,2013-10-14:2013/10/14/spring-ldap-custom-authorities/</guid><category>spring</category><category>spring-security</category><category>java</category><category>ldap</category><category>authentication</category></item><item><title>gitÂ branches</title><link>http://spapas.github.io/2013/10/08/git-branches/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#creating-a-new-git-repository" id="id2"&gt;Creating a new git&amp;nbsp;repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#branching" id="id3"&gt;Branching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#remote-branches" id="id4"&gt;Remote&amp;nbsp;branches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is"&gt;branch&lt;/a&gt; is a very interesting git feature. With this you may have more than one &lt;em&gt;branches&lt;/em&gt; in the same repository. The main
usage of this feature would be to create different versions of your source code to parallel test development of different features.
When the development of each of these features has been finished then the different versions would need to be combined (or merged) to a
single version. Of course, merging is not always the result of branching - some branches may exist indefinitely or other may just  be
deleted without&amp;nbsp;merging.&lt;/p&gt;
&lt;p&gt;I will try to experiment with it and comment on the&amp;nbsp;results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-a-new-git-repository"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Creating a new git&amp;nbsp;repository&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#8217;s start by creating a new git&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\&amp;gt;mkdir testgit
D:\&amp;gt;cd testgit
D:\testgit&amp;gt;echo contents 11 &amp;gt; file1.txt
D:\testgit&amp;gt;echo contents 222 &amp;gt; file2.txt
D:\testgit&amp;gt;echo 3333 &amp;gt; file2.txt
D:\testgit&amp;gt;copy con file3.txt
line 1 of file 3

line 3 of file 3

test

line 7 of file 3
^Z
       1 files copied.

D:\testgit&amp;gt;git init
Initialized empty Git repository in D:/testgit/.git/
D:\testgit&amp;gt;git add .
D:\testgit&amp;gt;git commit -m Initial
[master (root-commit) 96ca9af] Initial
 3 files changed, 9 insertions(+)
 create mode 100644 file1.txt
 create mode 100644 file2.txt
 create mode 100644 file3.txt
&lt;/pre&gt;
&lt;p&gt;To see the branch we are in we can use the &lt;tt class="docutils literal"&gt;git branch&lt;/tt&gt; command. Also &lt;tt class="docutils literal"&gt;git status&lt;/tt&gt; outputs the current&amp;nbsp;branch:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git status
# On branch master
nothing to commit, working directory clean
D:\testgit&amp;gt;git branch
* master
&lt;/pre&gt;
&lt;p&gt;So, it seems that when we create a new repository, a &amp;quot;master&amp;quot; branch is&amp;nbsp;created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="branching"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Branching&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets create a new branch and change our working branch to&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git branch slave
D:\testgit&amp;gt;git branch
* master
  slave
D:\testgit&amp;gt;git checkout slave
Switched to branch 'slave'
D:\testgit&amp;gt;git branch
  master
* slave
&lt;/pre&gt;
&lt;p&gt;We can see that now the slave branch is the current one. Let&amp;#8217;s do some changes and add commit them to the slave&amp;nbsp;branch:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git branch
  master
* slave
D:\testgit&amp;gt;echo new file1 contents &amp;gt; file1.txt
D:\testgit&amp;gt;git commit -m &amp;quot;Slave modification&amp;quot;
[slave b6083ad] Slave modification
 1 file changed, 1 insertion(+), 1 deletion(-)
D:\testgit&amp;gt;git checkout master
Switched to branch 'master'
D:\testgit&amp;gt;more file1.txt
contents 11
D:\testgit&amp;gt;git checkout slave
Switched to branch 'slave'
D:\testgit&amp;gt;more file1.txt
new file1 contents
&lt;/pre&gt;
&lt;p&gt;So the contents of file1.txt in the branch master is &lt;tt class="docutils literal"&gt;contents 11&lt;/tt&gt; while the contents of the same file
in the branch slave is &lt;tt class="docutils literal"&gt;new file1 contents&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;An interested behaviour is what happens with uncommit changes when changing branches. Let&amp;#8217;s try deleting a&amp;nbsp;file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;del file2.txt
D:\testgit&amp;gt;git status
# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#       deleted:    file2.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
D:\testgit&amp;gt;git checkout slave
D       file2.txt
Switched to branch 'slave'
D:\testgit&amp;gt;git status
# On branch slave
# Changes not staged for commit:
#   (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#       deleted:    file2.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
D:\testgit&amp;gt;git add -A
D:\testgit&amp;gt;git status
# On branch slave
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#       deleted:    file2.txt
#
D:\testgit&amp;gt;git checkout master
D       file2.txt
Switched to branch 'master'
D:\testgit&amp;gt;git status
# On branch master
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#       deleted:    file2.txt
#
&lt;/pre&gt;
&lt;p&gt;So, our changes are not correlated with a branch until we commit them! Let&amp;#8217;s commit them to the master repository and confirm&amp;nbsp;that:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git commit -m &amp;quot;Deleted file2.txt&amp;quot;
[master 6f8749d] Deleted file2.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 file2.txt
D:\testgit&amp;gt;git status
# On branch master
nothing to commit, working directory clean
D:\testgit&amp;gt;dir file2.txt
[...]
File not found
D:\testgit&amp;gt;git checkout slave
Switched to branch 'slave'
D:\testgit&amp;gt;git status
# On branch slave
nothing to commit, working directory clean
D:\testgit&amp;gt;dir file2.txt
[...]
08/10/2013  05:59 pm                15 file2.txt
&lt;/pre&gt;
&lt;p&gt;This is interesting&amp;#8230; Let&amp;#8217;s try modifying the file2.txt (which does not exist to the master&amp;nbsp;branch):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git branch
  master
* slave
D:\testgit&amp;gt;echo new file2 contents &amp;gt; file2.txt
D:\testgit&amp;gt;git add .
D:\testgit&amp;gt;git status
# On branch slave
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#       modified:   file2.txt
#
D:\testgit&amp;gt;git checkout master
error: Your local changes to the following files would be overwritten by checkout:
       file2.txt
Please, commit your changes or stash them before you can switch branches.
Aborting
&lt;/pre&gt;
&lt;p&gt;We won&amp;#8217;t be able to change the current branch until we commit the conflicting&amp;nbsp;change:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git commit -m &amp;quot;Modified file2&amp;quot;
[slave b5af832] Modified file2
 1 file changed, 1 insertion(+), 1 deletion(-)
D:\testgit&amp;gt;git checkout master
Switched to branch 'master'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="remote-branches"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Remote&amp;nbsp;branches&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For each local repository you can define a number of remote repositories, or &lt;a class="reference external" href="http://git-scm.com/book/en/Git-Basics-Working-with-Remotes"&gt;remotes&lt;/a&gt; as git calls them.
When you clone a repository from github.com, your local repository will have one remote, named origin. We will
try to add the same remote by hand. Let&amp;#8217;s suppose that we have created a repository in github.com named
testgit. After that we wil&amp;nbsp;issue:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git remote
D:\testgit&amp;gt;git remote add origin https://github.com/spapas/testgit.git
D:\testgit&amp;gt;git remote
origin
&lt;/pre&gt;
&lt;p&gt;So no we have one remote named origin that is linked with &lt;a class="reference external" href="https://github.com/spapas/testgit.git"&gt;https://github.com/spapas/testgit.git&lt;/a&gt;. Let&amp;#8217;s try to push our master
branch to the origin&amp;nbsp;remote:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git push origin master
Username for 'https://github.com': spapas
Password for 'https://spapas&amp;#64;github.com':
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 531 bytes, done.
Total 7 (delta 1), reused 0 (delta 0)
To https://github.com/spapas/testgit.git
 * [new branch]      master -&amp;gt; master
D:\testgit&amp;gt;git branch -r
  master
* slave
  remote/origin/master
&lt;/pre&gt;
&lt;p&gt;We see now that we have &lt;em&gt;three&lt;/em&gt; branches. Two local (master slave) and one remote (origin/master).  We will also add the slave remote&amp;nbsp;(origin/slave):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git branch -r
  origin/master
  origin/slave
&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s do a change to our local repository and then push them to the&amp;nbsp;remote:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;notepad file3.txt
D:\testgit&amp;gt;git add .
D:\testgit&amp;gt;git status
# On branch slave
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#       modified:   file3.txt
#
D:\testgit&amp;gt;git commit -m &amp;quot;Changed file3.txt&amp;quot;
[slave ce3b7b9] Changed file3.txt
 1 file changed, 1 insertion(+), 1 deletion(-)
D:\testgit&amp;gt;git push origin slave
Username for 'https://github.com': spapas
Password for 'https://spapas&amp;#64;github.com':
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 299 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/spapas/testgit.git
   b5af832..ce3b7b9  slave -&amp;gt; slave
&lt;/pre&gt;
&lt;p&gt;Everything works as expected. The final thing to test is to try checking out a remote&amp;nbsp;branch:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git checkout master
Switched to branch 'master'
D:\testgit&amp;gt;echo new new file1 &amp;gt; file1.txt
D:\testgit&amp;gt;more file1.txt
 new new file1
D:\testgit&amp;gt;git checkout origin/master
M       file1.txt
Note: checking out 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 6f8749d... Deleted file2.txt
D:\testgit&amp;gt;git status
# Not currently on any branch.
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#       modified:   file1.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
D:\testgit&amp;gt;more file1.txt
new new file1
&lt;/pre&gt;
&lt;p&gt;So, it seems that  when we check out the remote branch, we won&amp;#8217;t have any local branches, however the change we did to the file1.txt
is transfered just like when switching from one local repository to another. We can then add the changes and&amp;nbsp;commit:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git add .
D:\testgit&amp;gt;git commit
[detached HEAD 506674c] foo
 1 file changed, 1 insertion(+), 1 deletion(-)
 D:\testgit&amp;gt;git status
# Not currently on any branch.
nothing to commit, working directory clean
D:\testgit&amp;gt;git branch
* (no branch)
  master
  slave
&lt;/pre&gt;
&lt;p&gt;So we are working with an unnamed branch! We have to name it to be able to work without&amp;nbsp;problems:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
D:\testgit&amp;gt;git checkout -b named_branch
Switched to a new branch 'named_branch'
D:\testgit&amp;gt;git branch
  master
* named_branch
  slave
&lt;/pre&gt;
&lt;p&gt;Finally we may push again the named_branch to our remote&amp;nbsp;origin.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Tue, 08 Oct 2013 13:20:00 +0300</pubDate><guid>tag:spapas.github.io,2013-10-08:2013/10/08/git-branches/</guid><category>git</category><category>github</category><category>branching</category></item><item><title>Using pelican to generate static sites onÂ windows</title><link>http://spapas.github.io/2013/10/07/pelican-static-windows/</link><description>&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="id1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installing-pelican-and-generating-a-skeleton-for-your-site" id="id2"&gt;Installing pelican and generating a skeleton for your&amp;nbsp;site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modifying-pelican-tools-for-windows" id="id3"&gt;Modifying pelican tools for&amp;nbsp;windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configuration-of-your-skeleton-site" id="id4"&gt;Configuration of your skeleton site&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#settings" id="id5"&gt;Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#themes" id="id6"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#plugins" id="id7"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hosting-in-github-pages" id="id8"&gt;Hosting in github&amp;nbsp;pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; is a great static site generator. A static site generator is a tool that users a number of input files to
generate a complete html site. No database or server side scripting is needed for the resulting site, that&amp;#8217;s why
many such sites are hosted on &lt;a class="reference external" href="http://pages.github.com/"&gt;github pages&lt;/a&gt; (more on this&amp;nbsp;later).&lt;/p&gt;
&lt;p&gt;The input contains a number of html templates, css styles and the actual content of the site which most of the time is written in a
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lightweight_markup_language"&gt;lightweight markup language&lt;/a&gt; like &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; or &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. The static site generator will generate the static pages by
inserting the content in the appropriate places in the&amp;nbsp;templates.&lt;/p&gt;
&lt;p&gt;In the following sections we will describe the installation of pelican on Windows
and the creation of the spapas.github.io&amp;nbsp;site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-pelican-and-generating-a-skeleton-for-your-site"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Installing pelican and generating a skeleton for your&amp;nbsp;site&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The official pelican quickstart can be found in &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/getting_started.html"&gt;http://docs.getpelican.com/en/latest/getting_started.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To install pelican just&amp;nbsp;enter:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;pip install pelican
&lt;/pre&gt;
&lt;p&gt;After installing pelican, I propose creating a parent directory that will
contain all your pelican sites, along with extra themes and plugins like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican/
  âââ pelican-themes
  âââ other-pelican-theme
  âââ spapas.github.io
  âââ other-sites
&lt;/pre&gt;
&lt;p&gt;After creating the pelican directory just go in it with a command line and run the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; command.
It will ask you a number of questions, take a look at how I did answer&amp;nbsp;these:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;pelican-quickstart
Welcome to pelican-quickstart v3.2.2.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where do you want to create your new web site? [.] spapas.github.io
&amp;gt; What will be the title of this web site? Test github.io
&amp;gt; Who will be the author of this web site? Serafeim
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://spapas.github.io
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; Do you want to generate a Makefile to easily manage your website? (Y/n) n
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) n
Done. Your new project is available at C:\progr\py\pelican\spapas.github.io
&lt;/pre&gt;
&lt;p&gt;After that, you will have a pelican/spapas.github.io folder that will contain the following&amp;nbsp;content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
spapas.github.io/
  âââ content
  âââ output
  âââ pelicanconf.py
  âââ publishconf.py
&lt;/pre&gt;
&lt;p&gt;The content folder will contain your content (rst or markdown), the output will contain the generated html after you run pelican for your site.
The &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; will have a number of options for the generation of the development version of your site while the &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; will override some of the options
of &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; before generating the production version of your site that will actually be uploaded to github&amp;nbsp;pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modifying-pelican-tools-for-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Modifying pelican tools for&amp;nbsp;windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican uses a Makefile and a unix shell script to generate the static html files and start an http server for development.
Because I prefer to use windows, I answered no to the questions of generating these when pelican-quickstarte asked me.
Instead I have included the following files inside the spapas.github.io&amp;nbsp;directory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelrun.bat&lt;/tt&gt;, to generate the content for your debug site in the output&amp;nbsp;directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pelican content --debug --autoreload  --output output --settings pelicanconf.py
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelserve.bat&lt;/tt&gt;, to localy serve the generated debug&amp;nbsp;site:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pushd output
python -m pelican.server
popd
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelpub.bat&lt;/tt&gt;, to generate the production site in the output&amp;nbsp;directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pelican content --output output --settings publishconf.py
&lt;/pre&gt;
&lt;p&gt;Now, when you want to develop your site locally,&amp;nbsp;enter:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;start pelrun.bat
spapas.github.io&amp;gt;start pelserv.bat
&lt;/pre&gt;
&lt;p&gt;If everything was ok until now, you can visit &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; and will get the following&amp;nbsp;output:&lt;/p&gt;
&lt;img alt="all ok!" src="/images/site1.png" style="width: 780px;" /&gt;
&lt;p&gt;Because of the -r option that is used in &lt;tt class="docutils literal"&gt;pelrun.bat&lt;/tt&gt; whenever you do a change (for instance when you add an rst file in the content directory)
it will be discovered and the output will be changed&amp;nbsp;immediately!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-of-your-skeleton-site"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Configuration of your skeleton&amp;nbsp;site&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a number of settings that you may configure in your site. The pelican settings reference can be found here: &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/settings.html"&gt;http://docs.getpelican.com/en/latest/settings.html&lt;/a&gt;.
The pelicanconf.py and publishconf.py for this site can be found&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/spapas/spapas.github.io/blob/source/pelicanconf.py"&gt;https://github.com/spapas/spapas.github.io/blob/source/pelicanconf.py&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/spapas/spapas.github.io/blob/source/publishconf.py"&gt;https://github.com/spapas/spapas.github.io/blob/source/publishconf.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most important difference is the RELATIVE_URLS directive which must be True to the debug and False to the&amp;nbsp;production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Themes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beyond the default pelican theme, you can use configure pelican to use various other themes. To enable them, go to your pelican parent directory and clone the pelican-themes github&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;
&lt;p&gt;After that, you may select your theme from&amp;nbsp;pelicanconf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
THEME = &amp;quot;../pelican-themes/theme-name&amp;quot;
&lt;/pre&gt;
&lt;p&gt;In my configuration, I am using the Octopress Theme for Pelican, which you may get from here &lt;a class="reference external" href="https://github.com/duilio/pelican-octopress-theme"&gt;https://github.com/duilio/pelican-octopress-theme&lt;/a&gt;. Just clone it to your
pelican directory and refer to it as&amp;nbsp;above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Plugins&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pelican has a number of plugins. To enable them, go to your pelican parent directory and clone the pelican-plugins github&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;git clone https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;
&lt;p&gt;After that, you may add the following two lines to your&amp;nbsp;pelicanconf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
PLUGIN_PATH = '../pelican-plugins'
PLUGINS = ['a-plugin']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hosting-in-github-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Hosting in github&amp;nbsp;pages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To host your static site in github pages you must first of all create a repository named
username.github.io (for instance spapas.github.io) from&amp;nbsp;github.&lt;/p&gt;
&lt;p&gt;Then, generate your production&amp;nbsp;output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;pelpub.bat
&lt;/pre&gt;
&lt;p&gt;Finally, go to your output directory, create a git repository, add everything and push it to your&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io\output&amp;gt;git init
spapas.github.io\output&amp;gt;git add .
spapas.github.io\output&amp;gt;git commit -m Initial
spapas.github.io\output&amp;gt;git remote add origin https://github.com/spapas/spapas.github.io.git
spapas.github.io\output&amp;gt;git push origin master --force
&lt;/pre&gt;
&lt;p&gt;The &amp;#8212;force is to overwrite any previous versions - you don&amp;#8217;t care about version control on your output (but you want it on your&amp;nbsp;source).&lt;/p&gt;
&lt;p&gt;You can now visit &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and see your statically generated site&amp;nbsp;!&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t forget to add your source to the version control! To do that, add a .gitignore file in your pelican/username.github.io direcory
containing the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
output
&lt;/pre&gt;
&lt;p&gt;The above file will ignore the contents of the output directory from version control. After that, do the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;git init
spapas.github.io&amp;gt;git add .
spapas.github.io&amp;gt;git commit -m Initial
spapas.github.io&amp;gt;git branch -m master source
spapas.github.io&amp;gt;git remote add origin https://github.com/spapas/spapas.github.io.git
spapas.github.io&amp;gt;git push origin source
&lt;/pre&gt;
&lt;p&gt;The above will rename the master branch to source, will attach the origin remote to &lt;a class="reference external" href="https://github.com/spapas/spapas.github.io.git"&gt;https://github.com/spapas/spapas.github.io.git&lt;/a&gt; and will push the source
branch to it. Now you will have two branches in your username.github.io repository. One
named origin/master that will be your actual site and will be displayed through &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and one named origin/source that will contain the source of your&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;To learn more about branches and remotes you may check out &lt;a class="reference external" href="http://spapas.github.io/2013/10/08/git-branches/"&gt;the git branches article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serafeim Papastefanos</dc:creator><pubDate>Mon, 07 Oct 2013 10:20:00 +0300</pubDate><guid>tag:spapas.github.io,2013-10-07:2013/10/07/pelican-static-windows/</guid><category>static-html</category><category>github.io</category><category>github</category><category>pelican</category><category>windows</category><category>python</category><category>github-pages</category><category>rst</category></item></channel></rss>