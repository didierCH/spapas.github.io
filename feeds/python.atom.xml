<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/var/</title><link href="https://spapas.github.io/" rel="alternate"></link><link href="https://spapas.github.io/feeds/python.atom.xml" rel="self"></link><id>https://spapas.github.io/</id><updated>2016-06-27T14:20:00+03:00</updated><entry><title>How to download all images of an imgurÂ album</title><link href="https://spapas.github.io/2016/06/27/download-imgur-album-images/" rel="alternate"></link><updated>2016-06-27T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2016-06-27:2016/06/27/download-imgur-album-images/</id><summary type="html">&lt;p&gt;Recently I stubmled upon a great &lt;a class="reference external" href="http://imgur.com/"&gt;imgur&lt;/a&gt; album that contained
&lt;a class="reference external" href="http://imgur.com/a/aoi3T"&gt;379 movie stills that could be used for desktop background&lt;/a&gt;. I
really liked the idea and wanted to download all the images in order
to put them in a folder and use them as a slideshow for my Windows
desktop&amp;nbsp;background.&lt;/p&gt;
&lt;p&gt;Downloading them one by one would be considered penal
labour so I tried to find out an automatic way to get them all. With some
research in google, I found out an old post with the hint that by appending &lt;tt class="docutils literal"&gt;/zip&lt;/tt&gt;
to the &lt;span class="caps"&gt;URL&lt;/span&gt;  you could get a zip with all the images &amp;#8212; this didn&amp;#8217;t work for me. I
also tried various browser tools for scrapping or downloading all images from a page but they
didn&amp;#8217;t work also (they could only download a small number of the images and not&amp;nbsp;all).&lt;/p&gt;
&lt;p&gt;This seemed strange to me until I understood how imgur loads its images by &amp;quot;inspecting&amp;quot;
an image and taking a look at the page&amp;#8217;s &lt;span class="caps"&gt;DOM&lt;/span&gt; structure through the&amp;nbsp;console:&lt;/p&gt;
&lt;img alt="How imgur loads images" src="/images/imgur.gif" style="width: 700px;" /&gt;
&lt;p&gt;As we can see, the imgur client-side code has a component with a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;post-images&lt;/span&gt;&lt;/tt&gt; class
that contains the visible images (and thoese that are above/below the visible images). When
the user scrolls up/down the contents of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;post-images&lt;/span&gt;&lt;/tt&gt; will be changed accordingly
(notice how the component with &lt;tt class="docutils literal"&gt;id=EKMGEPc&lt;/tt&gt; moves down when I scroll up).
What this means is that each time there are 3-4 images (this actually depends on your window size)
under &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;post-images&lt;/span&gt;&lt;/tt&gt; that are changed when you scroll &amp;#8212; that&amp;#8217;s why downloaders / scrappers are not working (since these
tools just inspect the &lt;span class="caps"&gt;DOM&lt;/span&gt; they only see these 3-4 images to&amp;nbsp;download).&lt;/p&gt;
&lt;p&gt;Another interesting observation is that if you take a look at the network tab when you
scroll app down you won&amp;#8217;t see any ajax calls (the only network calls are the images that
are downloaded when they are appended to the &lt;span class="caps"&gt;DOM&lt;/span&gt;). So this means that somewhere there&amp;#8217;s
an array that is loaded when the page is loaded and contains all the images of the album.
If we can access this array then we&amp;#8217;d be able to get all the URLs of the&amp;nbsp;images&amp;#8230;&lt;/p&gt;
&lt;p&gt;From a quick look at the &lt;span class="caps"&gt;DOM&lt;/span&gt; structure we can understand that this is a React application
(components have a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;data-reactid&lt;/span&gt;&lt;/tt&gt; attribute). So I tried the &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;React Developer Tools&lt;/a&gt;
extension to see if I could find anything insteresting. Here&amp;#8217;s the&amp;nbsp;output:&lt;/p&gt;
&lt;img alt="Imgur - react dev tools" src="/images/imgur-react.png" style="width: 1000px;" /&gt;
&lt;p&gt;As you can see, there seem to be 4 top-level react elements &amp;#8212; the interesting one is &lt;tt class="docutils literal"&gt;GalleryPost&lt;/tt&gt;.
If you take a look at its props (in the right hand side of the react-devtools) you&amp;#8217;ll see that it has
an &lt;tt class="docutils literal"&gt;album_image_store&lt;/tt&gt; property which also seems interesting (it should be the image store for this
album). After searching a bit its attributes
you&amp;#8217;ll see that it has a &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; child attribute, which has a &lt;tt class="docutils literal"&gt;posts&lt;/tt&gt; child attribute which has an &lt;tt class="docutils literal"&gt;aoi3T&lt;/tt&gt;
attribute (notice that this is similar to the &lt;span class="caps"&gt;URL&lt;/span&gt; id of the album) and, finally this has an &lt;tt class="docutils literal"&gt;images&lt;/tt&gt;
attribute with objects describing all the images of that album&amp;nbsp;\o/!&lt;/p&gt;
&lt;p&gt;Now we need to get our hands on that &lt;tt class="docutils literal"&gt;images&lt;/tt&gt; array contents. Unfortunately, right clicking doesn&amp;#8217;t seem
to do anything from react-dev-tools and there doesn&amp;#8217;t seem a way to copy data from that panel&amp;#8230; However, in
the upper right position of that window you&amp;#8217;ll see the hint &lt;tt class="docutils literal"&gt;($r in the console)&lt;/tt&gt; which means that
the selected react component is available as $r in the normal javascript console - so by&amp;nbsp;entering&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
copy($r.props.album_image_store._.posts.aoi3T)
&lt;/pre&gt;
&lt;p&gt;I was able to copy the images of the album to my clipboard (please notice that &lt;tt class="docutils literal"&gt;$r&lt;/tt&gt; will have the
value of the selected react component so, before trying it you must select the &lt;tt class="docutils literal"&gt;GalleryPost&lt;/tt&gt;
component in the react-dev-tools&amp;nbsp;tab)!&lt;/p&gt;
&lt;p&gt;I dumped this to a file to take a look at it - it is really easy to interpret&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[
  {
    &amp;quot;hash&amp;quot;: &amp;quot;MQplfkV&amp;quot;,
    &amp;quot;title&amp;quot;: &amp;quot;2001: A Space Odyssey&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Cinematographer: Geoffrey Unsworth\n\nsource:\nhttp://www.filmcaptures.com/2001-a-space-odyssey/&amp;quot;,
    &amp;quot;width&amp;quot;: 1920,
    &amp;quot;height&amp;quot;: 864,
    &amp;quot;size&amp;quot;: 2262862,
    &amp;quot;ext&amp;quot;: &amp;quot;.png&amp;quot;,
    &amp;quot;animated&amp;quot;: false,
    &amp;quot;prefer_video&amp;quot;: false,
    &amp;quot;looping&amp;quot;: false,
    &amp;quot;datetime&amp;quot;: &amp;quot;2014-10-25 04:02:58&amp;quot;,
    &amp;quot;thumbsize&amp;quot;: &amp;quot;g&amp;quot;,
    &amp;quot;minHeight&amp;quot;: 306,
    &amp;quot;shown&amp;quot;: true,
    &amp;quot;containerHeight&amp;quot;: 501
  },
..
&lt;/pre&gt;
&lt;p&gt;The imgur images have a &lt;span class="caps"&gt;URL&lt;/span&gt; of http//i.imgur.com/{hash}{ext} so, we
can use the following small python 2 program to download all images from that&amp;nbsp;album:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import requests
import json
from slugify import slugify

# Modified from http://stackoverflow.com/a/16696317/119071
def download_file(url, local_filename):
    r = requests.get(url, stream=True)
    with open(local_filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush() commented by recommendation from J.F.Sebastian
    return local_filename


if __name__ == '__main__':
    for i, jo in enumerate(json.loads(open(&amp;quot;album.txt&amp;quot;).read())):
        filename = '{0}-{1}{2}'.format(slugify(jo['title']), i+1, jo['ext'])
        url = 'http://i.imgur.com/{0}{1}'.format(jo['hash'].strip(), jo['ext'])
        print filename, url
        download_file(url, filename)
&lt;/pre&gt;
&lt;p&gt;Notice that the above uses the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library to retrieve the files and the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-slugify&lt;/span&gt;&lt;/tt&gt; library to generate a filename using the image title so these
libraries must be installed by using &lt;tt class="docutils literal"&gt;pip install requests &lt;span class="pre"&gt;python-slugify&lt;/span&gt;&lt;/tt&gt;. This
will read a file named &lt;tt class="docutils literal"&gt;album.txt&lt;/tt&gt; that should contain the copied imgur album images
in the same directory and download all the&amp;nbsp;images.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; The above methodology works today (27-06-2016) - probably it will
stop working sometime in the future, when imgur changes its image loading algorithm
or its image object representation.
Also, I haven&amp;#8217;t been able to find a way to quickly access the &lt;tt class="docutils literal"&gt;GalleryPost&lt;/tt&gt; react
component from the javascript console - you need to install the react dev tools and
select that component from there so that you&amp;#8217;ll have the &lt;tt class="docutils literal"&gt;$r&lt;/tt&gt; reference to it in
the javascript console. Finally, don&amp;#8217;t forget to change the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;copy($r.props.album_image_store._.posts.aoi3T)&lt;/span&gt;&lt;/tt&gt;
depending on your album id (also if the id is not a valid identifier, for example it
starts with number, use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;copy($r.props.album_image_store._.posts['aoi3T']&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
</summary><category term="imgur"></category><category term="python"></category><category term="react"></category><category term="javascript"></category><category term="console"></category><category term="research"></category></entry><entry><title>Using Werkzeug debugger withÂ Django</title><link href="https://spapas.github.io/2016/06/07/django-werkzeug-debugger/" rel="alternate"></link><updated>2016-06-07T10:40:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2016-06-07:2016/06/07/django-werkzeug-debugger/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://werkzeug.pocoo.org/"&gt;Werkzeug&lt;/a&gt; is a &lt;span class="caps"&gt;WSGI&lt;/span&gt; utility library for Python. Beyond others, it includes an interactive
debugger - what this means is that when your python application throws an exception,
Werkzeug will display the exception stacktrace in the browser (that&amp;#8217;s not a big deal)
and allow you to write python commands interactively wherever you want in that stacktrace
(that&amp;#8217;s the important&amp;nbsp;stuff).&lt;/p&gt;
&lt;p&gt;Now, the even more important stuff is that you can &lt;em&gt;abuse&lt;/em&gt; the above feature by adding
code that will throw an exception in various parts of your application and, as a result
get an interactive python prompt at &lt;em&gt;specific&lt;/em&gt; parts of your application (for example,
before validating your form, or when a method in your model is executed). All this,
without the need to use a specific &lt;span class="caps"&gt;IDE&lt;/span&gt; to add&amp;nbsp;breakpoints!&lt;/p&gt;
&lt;p&gt;This is an old trick however some people don&amp;#8217;t use it and make their work more
difficult. Actually, this one of the first things I learned when starting with django
and use it all the time since then - I am writing this post mainly to emphasize
its usefulness and to urge more people to use it. If you don&amp;#8217;t already use it please try
it (and thank me&amp;nbsp;later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;There are two components you need to install in your django project to use the
above&amp;nbsp;technique:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;: a swiss army knife toolset for django - beyond other useful tools it includes a management command (&lt;tt class="docutils literal"&gt;runserver_plus&lt;/tt&gt;) to start the Werkzeug interactive debugger with your&amp;nbsp;project&lt;/li&gt;
&lt;li&gt;werkzeug: the werkzeug utility&amp;nbsp;library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these can just be installed with pip (even on windows). After installing them, add &lt;tt class="docutils literal"&gt;django_extensions&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt; setting to enable
the management&amp;nbsp;command.&lt;/p&gt;
&lt;p&gt;After that, you can just run &lt;tt class="docutils literal"&gt;python manage.py runserver_plus&lt;/tt&gt; - if everything was installed successfully you should see something like this (in windows at&amp;nbsp;least):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
(venv) C:\progr\py\werkzeug\testdebug&amp;gt;python manage.py runserver_plus
 * Restarting with stat
Performing system checks...

System check identified no issues (0 silenced).

Django version 1.9.7, using settings 'testdebug.settings'
Development server is running at http://127.0.0.1:8000/
Using the Werkzeug debugger (http://werkzeug.pocoo.org/)
Quit the server with CTRL-BREAK.
 * Debugger is active!
 * Debugger pin code: 143-738-172
 * Debugger is active!
 * Debugger pin code: 174-740-467
 * Running on http://127.0.0.1:8000/ (Press CTRL+C to quit)
&lt;/pre&gt;
&lt;p&gt;Now, the &amp;quot;debugger pin&amp;quot; you see is a way to protect your interactive debugger (i.e it asks for the pin
before allowing you to enter the interactive prompt). Since this feature should &lt;em&gt;only&lt;/em&gt; be used in your
local development system I recommend to just disable it by setting the &lt;tt class="docutils literal"&gt;WERKZEUG_DEBUG_PIN&lt;/tt&gt; environment
variable to &lt;tt class="docutils literal"&gt;off&lt;/tt&gt; (i.e &lt;tt class="docutils literal"&gt;set WERKZEUG_DEBUG_PIN=off&lt;/tt&gt; in windows). After that you should see the message
&amp;#8220; * Debugger pin disabled.  &lt;span class="caps"&gt;DEBUGGER&lt;/span&gt; &lt;span class="caps"&gt;UNSECURED&lt;/span&gt;!&amp;#8220;. Please be careful with the interactive debugger
and  &lt;em&gt;never, ever use it in a production deployment&lt;/em&gt; even with the debug pin enabled. I also recommend to
use it &lt;em&gt;only&lt;/em&gt; on a local development server (i.e the server must be run on 127.0.0.1/local &lt;span class="caps"&gt;IP&lt;/span&gt; and not
allow remote&amp;nbsp;connections).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Now its time for the magic: Let&amp;#8217;s add a django view that throws an exception, like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def test(request):
    a+=1
&lt;/pre&gt;
&lt;p&gt;to your urls.py ( &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;url(r'^test/',&lt;/span&gt; test )&lt;/tt&gt; ) and after you visit &lt;cite&gt;test&lt;/cite&gt; you should see something like&amp;nbsp;this:&lt;/p&gt;
&lt;img alt="Werkzeug debugger" src="/images/werkzeug.png" style="width: 800px;" /&gt;
&lt;p&gt;Since the &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; variable was not defined you&amp;#8217;ll get an exception when you try to increaseit.
Now, notice the console icon in the lower right corner - when you click it you&amp;#8217;ll get the interactive debugger!
Now you can enter python commands exactly where the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;a+=1&lt;/span&gt;&lt;/tt&gt; code was. For example, you can see what are the
attributes of the &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; object you receive (for example, just enter &lt;tt class="docutils literal"&gt;request.&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt; to output the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/tt&gt;
dictionary to the interactive&amp;nbsp;console).&lt;/p&gt;
&lt;p&gt;Notice that you can get interactive consoles wherever you want in the stacktrace, i.e I could get a console at line 147
of &lt;cite&gt;django.core.handlers.base&lt;/cite&gt; module on the &lt;tt class="docutils literal"&gt;get_response&lt;/tt&gt; method &amp;#8212; this is needed sometimes especially when you
want to see how your code is called by other&amp;nbsp;modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, using the presented technique you can really quickly start an interactive console wherever you
want and start entering commands. I use it whenever I need to write anything non trivial (or even trivial stuff -
I sometimes prefer opening and interactive debugger to find out by trial and error how should I write a django
&lt;span class="caps"&gt;ORM&lt;/span&gt; query than open models.py) and really miss it on other environments&amp;nbsp;(Java).&lt;/p&gt;
&lt;p&gt;The above technique should also work with few modifications with other python web frameworks so it&amp;#8217;s not&amp;nbsp;django-only.&lt;/p&gt;
&lt;p&gt;Finally, please notice that both Werkzeug and django-extensions offer many more tools beyond the interactive debugger presented here -
I encourage you to research them since - if you follow my advice - you&amp;#8217;ll integrate these to &lt;em&gt;all&lt;/em&gt; your django&amp;nbsp;projects!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="debug"></category><category term="python"></category><category term="werkzeug"></category><category term="django-extensions"></category></entry><entry><title>Understanding nested list comprehension syntax inÂ Python</title><link href="https://spapas.github.io/2016/04/27/python-nested-list-comprehensions/" rel="alternate"></link><updated>2016-04-27T11:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2016-04-27:2016/04/27/python-nested-list-comprehensions/</id><summary type="html">&lt;p&gt;List comprehensions are one of the really nice and powerful features of Python. It
is actually a smart way to introduce new users to functional programming concepts
(after all a list comprehension is just a combination of map and filter) and compact&amp;nbsp;statements.&lt;/p&gt;
&lt;p&gt;However, one thing that always troubled me when using list comprehensions is their
non intuitive syntax when nesting was needed. For example, let&amp;#8217;s say that we just
want to flatten a list of lists using a nested list&amp;nbsp;comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;non_flat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To write that, somebody would think: For a simple list
comprehension I need to
write &lt;tt class="docutils literal"&gt;[ x for x in non_flat ]&lt;/tt&gt; to get all its items - however I want to retrieve each element of the &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; list so I&amp;#8217;ll write something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;non_flat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well duh! At this time I&amp;#8217;d need research google for a working list comprehension syntax and adjust it to my needs (or give up and write it as a double for&amp;nbsp;loop).&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the correct nested list comprehension people&amp;nbsp;wondering:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;non_flat&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if I wanted to add a third level of nesting or an if? Well I&amp;#8217;d just bite the bullet and use for&amp;nbsp;loops!&lt;/p&gt;
&lt;p&gt;However, if you take a look at the document describing list comprehensions in python (&lt;cite&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 202&lt;/cite&gt;) you&amp;#8217;ll see
the following&amp;nbsp;phrase:&lt;/p&gt;
&lt;blockquote&gt;
It is proposed to allow conditional construction of list literals
using for and if clauses. &lt;strong&gt;They would nest in the same way for
loops and if statements nest now.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This statement explains everything! &lt;em&gt;Just think in for-loops syntax&lt;/em&gt;. So, If I used for loops for the previous flattening, I&amp;#8217;d do something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;non_flat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which, if &lt;cite&gt;y&lt;/cite&gt; is moved to the front and joined in one line would be the correct nested list&amp;nbsp;comprehension!&lt;/p&gt;
&lt;p&gt;So that&amp;#8217;s the way&amp;#8230; What If I wanted to include only lists with more than 2 elements in the flattening
(so &lt;cite&gt;[7,8]&lt;/cite&gt; should not be included)? I&amp;#8217;ll write it with for loops&amp;nbsp;first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;non_flat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;so by convering this to list comprehension we&amp;nbsp;get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;non_flat&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;p&gt;One final, more complex example: Let&amp;#8217;s say that we have a list
of lists of words and we want to get a list of all the letters of these words
along with the index of the list they belong to
but only for words with more than two characters. Using the same
for-loop syntax for the nested list comprehensions we&amp;#8217;ll&amp;nbsp;get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;taz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;koko&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="debug"></category><category term="404"></category><category term="error"></category><category term="python"></category></entry><entry><title>Show 404 page on django when DEBUG=True</title><link href="https://spapas.github.io/2015/04/29/django-show-404-page/" rel="alternate"></link><updated>2015-04-29T10:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2015-04-29:2015/04/29/django-show-404-page/</id><summary type="html">&lt;p&gt;The default 404 error page on django can be &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/topics/http/views/#the-http404-exception"&gt;easily overriden&lt;/a&gt; by adding
a template named &lt;tt class="docutils literal"&gt;404.html&lt;/tt&gt; to the top level directory of your templates.
However, on your development environment you&amp;#8217;ll never be able to see this
template because when &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DEBUG&lt;/span&gt;=True&lt;/tt&gt; django will render the debug not found
page to help you debug your url&amp;nbsp;configuration.&lt;/p&gt;
&lt;p&gt;If you want to display that page in your development environment you can always
change the &lt;span class="caps"&gt;DEBUG&lt;/span&gt; setting to False, however there&amp;#8217;s a better way: Add a url
pattern for django&amp;#8217;s default 404 view - just  add the following to your &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django.views.defaults&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c"&gt;# Other url patterns ...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^404/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page_not_found&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#8217;ll then be able to see your 404 page by visiting the defined &lt;span class="caps"&gt;URL&lt;/span&gt;!&lt;/p&gt;
</summary><category term="django"></category><category term="debug"></category><category term="404"></category><category term="error"></category><category term="python"></category></entry><entry><title>Calling the REST API of Pusher fromÂ python</title><link href="https://spapas.github.io/2015/02/06/python-pusher-rest/" rel="alternate"></link><updated>2015-02-06T12:20:00+02:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2015-02-06:2015/02/06/python-pusher-rest/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pusher.com/"&gt;Pusher&lt;/a&gt; is one of the best real time frameworks right now. Using it you can add real time
events in your projects without the need to configure and use &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers that support
real-time events in your environment. I used it recently in a project and it worked really
good, having a very simple &lt;span class="caps"&gt;API&lt;/span&gt; and a nice interface for debugging your&amp;nbsp;requests.&lt;/p&gt;
&lt;p&gt;The only problem I&amp;#8217;ve found was that the &lt;a class="reference external" href="https://github.com/pusher/pusher_client_python"&gt;Pusher python &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; misses some features that
the APIs for other languages have, specifically finding out the users on a presence&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;Pusher supports real-time events through the use of &amp;quot;channels&amp;quot;. Each pusher client will
subscribe to a channel and receive messages that are sent to that channel. A special kind
of channel are presence channels which keep a list of their subscribers. You can query the
&lt;a class="reference external" href="https://pusher.com/docs/rest_api"&gt;Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (or f.e the Pusher Javascript &lt;span class="caps"&gt;API&lt;/span&gt;) to find out the names of the users
in a presence channel - however this is &lt;em&gt;not&lt;/em&gt; currently possible with the python &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Unfortuanately, calling the Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is &lt;em&gt;not&lt;/em&gt; so easy, since it needs a complicated
singining of each request, so I&amp;#8217;ve written this post to help developers that need to call
this &lt;span class="caps"&gt;API&lt;/span&gt; from python (to get the users of a presence channel or for any other method the
&lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;supports).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-the-request"&gt;
&lt;h2&gt;Signing the&amp;nbsp;request&lt;/h2&gt;
&lt;p&gt;Quoting from the &lt;a class="reference external" href="https://pusher.com/docs/rest_api"&gt;Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;, to sign a request we need a signature,&amp;nbsp;which:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The signature is a &lt;span class="caps"&gt;HMAC&lt;/span&gt; &lt;span class="caps"&gt;SHA256&lt;/span&gt; hex digest. This is generated by signing a string made up of the following components concatenated with newline characters&amp;nbsp;\n:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The uppercase request method (e.g. &lt;span class="caps"&gt;POST&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;The request path (e.g.&amp;nbsp;/some/resource)&lt;/li&gt;
&lt;li&gt;The query parameters sorted by key, with keys converted to lowercase, then joined as in the query string. Note that the string must not be url escaped (e.g. given the keys auth_key: foo, Name: Something else, you get auth_key=foo&amp;amp;name=Something&amp;nbsp;else)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, we need to create a string and then sign it using our Pusher api_key and secret. To help with this, we create a &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;
class which will be initialzed with out pusher key/secret and correctly sign a&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It uses the &lt;tt class="docutils literal"&gt;hmac&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;hashlib&lt;/tt&gt; python&amp;nbsp;modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="generating-the-complete-query-string"&gt;
&lt;h2&gt;Generating the complete query&amp;nbsp;string&lt;/h2&gt;
&lt;p&gt;We can now create a function that will sign a request using an instance of the above&amp;nbsp;token:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sign_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;auth_signature=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sign_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt; receives an instance of a &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt;, the path that we want to request
without the server part (for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/apps/33/users/my-channel&lt;/span&gt;&lt;/tt&gt;)  and a dictionary of
request parameters. It then adds three extra fields to the request parameters (&lt;tt class="docutils literal"&gt;auth_key, auth_timestamp, auth_version&lt;/tt&gt;)
and creates a list of these parameters in the &lt;tt class="docutils literal"&gt;key=value&lt;/tt&gt; form, where the keys are alphabetically sorted.
After that it joins the above &lt;tt class="docutils literal"&gt;key=value&lt;/tt&gt; parameters using &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; to create the &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt; and then it creates the string to be signed (&lt;tt class="docutils literal"&gt;sign_data&lt;/tt&gt;)
by concatenating the &lt;span class="caps"&gt;HTTP&lt;/span&gt; methdo (&lt;span class="caps"&gt;GET&lt;/span&gt;) with the path and the &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt;. Finally, it appends the signing result as an extra
query parameter named (&lt;tt class="docutils literal"&gt;auth_signature&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requesting-the-users-of-the-presence-channel"&gt;
&lt;h2&gt;Requesting the users of the presence&amp;nbsp;channel&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt; can now be used to get the users of a presence channel like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;partial_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;/apps/{0}/channels/{1}/users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.pusherapp.com/{0}?{1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;get_users&lt;/tt&gt; function will generate the path of the pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; (using
our pusher app_id and channel name) and initialize a signing &lt;tt class="docutils literal"&gt;Token&lt;/tt&gt; using
the pusher key and secret. It will then pass the previous to &lt;tt class="docutils literal"&gt;create_signed_query_string&lt;/tt&gt;
to generate the complete &lt;tt class="docutils literal"&gt;query_string&lt;/tt&gt; and generate the &lt;tt class="docutils literal"&gt;full_path&lt;/tt&gt; to which
a simple &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; request is issued. The result will be a &lt;span class="caps"&gt;JSON&lt;/span&gt; list of the users in the
presence&amp;nbsp;channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complete-example"&gt;
&lt;h2&gt;Complete&amp;nbsp;example&lt;/h2&gt;
&lt;p&gt;A complete example of getting the presence users of a channel is the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hmac&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;app_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_app_id&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_key&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_secret&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pusher_presence_channel&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;auth_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{0}={1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sign_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;query_string&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;auth_signature=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sign_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;partial_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;/apps/{0}/channels/{1}/users&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;create_signed_query_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://api.pusherapp.com/{0}?{1}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;get_users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With the above we are able to not only easily get the users of a Pusher presence
channel in python but to also call any method we want from the Pusher &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; by implementing a function
similar to  &lt;tt class="docutils literal"&gt;get_users&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pusher"></category><category term="python"></category><category term="rest"></category></entry><entry><title>Retrieving Gmail blockedÂ attachments</title><link href="https://spapas.github.io/2014/10/23/retrieve-gmail-blocked-attachments/" rel="alternate"></link><updated>2014-10-23T14:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2014-10-23:2014/10/23/retrieve-gmail-blocked-attachments/</id><summary type="html">&lt;p&gt;Before services like Dropbox were widely available, some people (including me) were using
their Gmail account as a primitive backup solution: Compress your directory and send it to
your gmail. There. Backup&amp;nbsp;complete.&lt;/p&gt;
&lt;p&gt;However, nothing is so&amp;nbsp;easy&amp;#8230;&lt;/p&gt;
&lt;p&gt;Recently, I wanted to retrieve one of these backups, a .rar containing the complete
source code (since it was written in TeX) of my PhD thesis. The problem was that Gmail blocked the access to these attachments&amp;nbsp;saying&lt;/p&gt;
&lt;blockquote&gt;
Anti-virus warning - 1 attachment contains a virus or blocked file. Downloading this attachment is disabled.&lt;/blockquote&gt;
&lt;p&gt;probably because I had a number of .bat files inside that .rar archive to automate my work&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;Now what&amp;nbsp;?&lt;/p&gt;
&lt;p&gt;After searching the internet and not founding any solutions, I tried the options that gmail gives for each email. One
particular one cought my interest: &lt;em&gt;Show&amp;nbsp;original&lt;/em&gt;&lt;/p&gt;
&lt;img alt="Here it is!" src="/images/show_original.png" style="width: 780px;" /&gt;
&lt;p&gt;Clicking this option opened a text file with the original, &lt;span class="caps"&gt;MIME&lt;/span&gt; encoded message. The interesting thing of course&amp;nbsp;was&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
------=_NextPart_000_004F_01CA0AED.E63C2A30
Content-Type: application/octet-stream;
      name=&amp;quot;phdstuff.rar&amp;quot;
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
      filename=&amp;quot;phdstuff.rar&amp;quot;

UmFyIRoHAM+QcwAADQAAAAAAAAB0f3TAgCwANAMAAFQEAAACRbXCx8lr9TodMwwAIAAAAG5ld2Zp
bmFsLnR4dA3dEQzM082BF7sB+D3q6QPUNEfwG7vHQgNkiQDTkGvfhOE4mNltIJJlBFMOCQPzPeKD
...
&lt;/pre&gt;
&lt;p&gt;So the whole attachment was contained in that text file, encoded in base64! Now I just
needed to extract it from the email and convert it back to&amp;nbsp;binary.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Important: Before going the python way, please check the 2 June 2015 update at the end of the article for an easier solution!&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This was very easy to do using Python - some people &lt;a class="reference external" href="http://stackoverflow.com/questions/4067937/getting-mail-attachment-to-python-file-object"&gt;had already asked the same thing on &lt;span class="caps"&gt;SO&lt;/span&gt;&lt;/a&gt;.
So here&amp;#8217;s a simple program that gets an email in text/mime format as input and dumps all&amp;nbsp;attachments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Please enter a file to extract attachments from&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_filename&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c"&gt;# if it is an attachment&lt;/span&gt;
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_filename&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save this to a file named &lt;tt class="docutils literal"&gt;get_attachments.py&lt;/tt&gt; and, after saving the original message to a file
named &lt;tt class="docutils literal"&gt;0.txt&lt;/tt&gt; run &lt;tt class="docutils literal"&gt;python get_attachments.py 0.txt&lt;/tt&gt; and you&amp;#8217;ll see the attachments of your email in the same&amp;nbsp;folder!&lt;/p&gt;
&lt;blockquote&gt;
Disclaimer: I have to warn you that since Gmail claims that an attachment is &lt;em&gt;not safe&lt;/em&gt; it may be &lt;strong&gt;actually not safe&lt;/strong&gt;. So
you must be 100% sure that you know what you are doing before retrievening your email attachments like this.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Stefan &lt;a class="reference external" href="https://gist.github.com/stefansundin/a99bbfb6cda873d14fd2"&gt;created an improved version&lt;/a&gt; of the attachment extractor which is also compatible with Python&amp;nbsp;3.4!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 12 January 2015&lt;/strong&gt;: Ivana (at the comments section) proposed a different solution that may work
for some files: &lt;em&gt;Use a mobile Gmail client (I tested it with Android) and &amp;quot;Save to Drive&amp;quot; your attachment.
You&amp;#8217;ll then be able to download it from the Google Drive!&lt;/em&gt; I am not sure if this works for all attachments,
however it worked for the source of my PhD thesis! I&amp;#8217;m writing it may not work for all attachments because
when you download something from Google Drive it does a virus check so it may not allow you to download the
attachment and then  you&amp;#8217;ll still need to do it manually using the method below (however &lt;strong&gt;in that case you
must be even more cautious for the case the attachment actualyl contains a malicious file&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 2 June 2015&lt;/strong&gt;: Commenter Sumit Chauhan (and Yuri Marx) proposed to change the extension
of the downloaded &lt;span class="caps"&gt;MIME&lt;/span&gt; text file (original message) to eml and open it with Outlook. I don&amp;#8217;t have
Outlook in my system, however I tried opening it with &lt;a class="reference external" href="https://www.mozilla.org/el/thunderbird/"&gt;Thunderbird&lt;/a&gt; and it worked!!! So please
try this solution before trying the pythonic way (especially if you&amp;#8217;re not familiar with&amp;nbsp;python).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update, 6 March 2016&lt;/strong&gt;: Commenter Alex (Alexandre Barfuhok) proposed another clever trick (involving making visible
the initially invisible &amp;quot;Download to drive&amp;quot; button) for retrieving gmail blocked attachments!
Read more about it &lt;a class="reference external" href="http://www.barfuhok.com/how-to-download-a-file-with-anti-virus-warning-on-gmail/"&gt;at his article&lt;/a&gt;!&lt;/p&gt;
</summary><category term="gmail"></category><category term="python"></category><category term="security"></category><category term="google"></category></entry></feed>